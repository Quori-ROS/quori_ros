{"name":"root/home/packages/astra_ros/astra_ros_api/n-ros.s-SubscribeOptions.tracked_object","symbols":{"root/home/packages/astra_ros/astra_ros_api/n-ros.s-SubscribeOptions.tracked_object":{"type":"variable","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.s-SubscribeOptions.tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" An object whose destruction will prevent the callback associated with this subscription"}]},{"type":"paragraph","children":[{"type":"text","text":" A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,"},{"type":"text","text":" and if the reference count goes to 0 the subscriber callbacks will not get called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"note","arguments":[],"children":[{"type":"text","text":" Note that setting this will cause a new reference to be added to the object before the"},{"type":"text","text":" callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore"},{"type":"text","text":" thread) that the callback is invoked from."}]}],"visibility":"default","accessibility":"public"}}}