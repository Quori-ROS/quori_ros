{"name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param","symbols":{"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-has":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-has","display_name":"has","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Check whether a parameter exists on the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to check."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the parameter exists, false otherwise"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the key is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-getCached":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-getCached","display_name":"getCached","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Get a string->bool map value from the parameter server, with local caching"}]},{"type":"paragraph","children":[{"type":"text","text":" This function will cache parameters locally, and subscribe for updates from"},{"type":"text","text":" the parameter server.  Once the parameter is retrieved for the first time"},{"type":"text","text":" no subsequent getCached() calls with the same key will query the master --"},{"type":"text","text":" they will instead look up in the local cache."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to be used in the parameter server's dictionary"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"map","direction":"out","children":[{"type":"text","text":" Storage for the retrieved value."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the parameter value was retrieved, false otherwise"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the key is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"map","ty":{"kind":"lvaluereference","display_name":"std::map<std::string, bool> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::map<std::string, bool>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"map<std::string, bool>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-set":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-set","display_name":"set","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Set a string->bool map value on the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to be used in the parameter server's dictionary"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"map","direction":null,"children":[{"type":"text","text":" The map value to be inserted."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the key is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"map","ty":{"kind":"lvaluereference","display_name":"const std::map<std::string, bool> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::map<std::string, bool>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"map<std::string, bool>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-search":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-search","display_name":"search","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Search up the tree for a parameter with a given key.  This version defaults to starting in"},{"type":"text","text":" the current node's name"}]},{"type":"paragraph","children":[{"type":"text","text":" This function parameter server's searchParam feature to search up the tree for"},{"type":"text","text":" a parameter.  For example, if the parameter server has a parameter [/a/b]"},{"type":"text","text":" and you specify the namespace [/a/c/d], searching for the parameter \"b\" will"},{"type":"text","text":" yield [/a/b].  If [/a/c/d/b] existed, that parameter would be returned instead."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" the parameter to search for"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"result","direction":"out","children":[{"type":"text","text":" the found value (if any)"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the parameter was found, false otherwise."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the key is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"result","ty":{"kind":"lvaluereference","display_name":"std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-getParamNames":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-getParamNames","display_name":"getParamNames","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Get the list of all the parameters in the server"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"keys","direction":null,"children":[{"type":"text","text":" The vector of all the keys"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" false if the process fails"}]}],"template_args":null,"params":[{"name":"keys","ty":{"kind":"lvaluereference","display_name":"std::vector<std::string> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::vector<std::string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"vector<std::string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-get":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-get","display_name":"get","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Get a string->bool map value from the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to be used in the parameter server's dictionary"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"map","direction":"out","children":[{"type":"text","text":" Storage for the retrieved value."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the parameter value was retrieved, false otherwise"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the key is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"map","ty":{"kind":"lvaluereference","display_name":"std::map<std::string, bool> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::map<std::string, bool>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"map<std::string, bool>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-del":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-del","display_name":"del","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Delete a parameter from the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to delete."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the deletion succeeded, false otherwise."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the key is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param":{"type":"namespace","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param","display_name":"param","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Contains functions which allow you to query the parameter server"}]}],"children":["root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-has","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-unsubscribeCachedParam","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-getCached","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-search","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.param","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-get","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-del","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-set","root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-getParamNames"]},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.param":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.param","display_name":"param","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Return value from parameter server, or default if unavailable."}]},{"type":"paragraph","children":[{"type":"text","text":" This method tries to retrieve the indicated parameter value from the"},{"type":"text","text":" parameter server. If the parameter cannot be retrieved, "},{"type":"inlinecommand","command":"c","arguments":["default_val"],"style":"monospace"},{"type":"text","text":" is returned instead."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"param_name","direction":null,"children":[{"type":"text","text":" The key to be searched on the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"default_val","direction":null,"children":[{"type":"text","text":" Value to return if the server doesn't contain this"},{"type":"text","text":" parameter."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" The parameter value retrieved from the parameter server, or"},{"type":"text","text":" "},{"type":"inlinecommand","command":"c","arguments":["default_val"],"style":"monospace"},{"type":"text","text":" if unavailable."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the key is not a valid graph resource name."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-unsubscribeCachedParam":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros.n-param.f-unsubscribeCachedParam","display_name":"unsubscribeCachedParam","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Unsubscribe all cached parameter from the master"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false}}}