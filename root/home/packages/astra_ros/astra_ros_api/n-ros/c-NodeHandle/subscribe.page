{"name":"root/home/packages/astra_ros/astra_ros_api/n-ros/c-NodeHandle/subscribe","symbols":{"root/home/packages/astra_ros/astra_ros_api/n-ros/c-NodeHandle/subscribe":{"type":"function","name":"root/home/packages/astra_ros/astra_ros_api/n-ros/c-NodeHandle/subscribe","display_name":"subscribe","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Subscribe to a topic, version for arbitrary boost::function object"}]},{"type":"paragraph","children":[{"type":"text","text":" This method connects to the master to register interest in a given"},{"type":"text","text":" topic.  The node will automatically be connected with publishers on"},{"type":"text","text":" this topic.  On each message receipt, callback is invoked and passed a shared pointer"},{"type":"text","text":" to the message received.  This message should "},{"type":"inlinecommand","command":"b","arguments":["not"],"style":"bold"},{"type":"text","text":" be changed in place, as it"},{"type":"text","text":" is shared with any other subscriptions to this topic."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of subscribe allows anything bindable to a boost::function object"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":null,"parameter":"M","direction":null,"children":[{"type":"text","text":" [template] the message type"},{"type":"text","text":" "}]},{"type":"paramcommand","index":null,"parameter":"C","direction":null,"children":[{"type":"text","text":" [template] the callback parameter type (e.g. const boost::shared_ptr"},{"type":"text","text":"<M"},{"type":"text","text":" const>"},{"type":"text","text":"&"},{"type":"text","text":" or const M"},{"type":"text","text":"&"},{"type":"text","text":")"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"topic","direction":null,"children":[{"type":"text","text":" Topic to subscribe to"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"queue_size","direction":null,"children":[{"type":"text","text":" Number of incoming messages to queue up for"},{"type":"text","text":" processing (messages in excess of this queue capacity will be"},{"type":"text","text":" discarded)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"callback","direction":null,"children":[{"type":"text","text":" Callback to call when a message has arrived"},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,"},{"type":"text","text":" and if the reference count goes to 0 the subscriber callbacks will not get called."},{"type":"text","text":" Note that setting this will cause a new reference to be added to the object before the"},{"type":"text","text":" callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore"},{"type":"text","text":" thread) that the callback is invoked from."},{"type":"text","text":" "}]},{"type":"paramcommand","index":4,"parameter":"transport_hints","direction":null,"children":[{"type":"text","text":" a TransportHints structure which defines various transport-related options"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic."},{"type":"text","text":" On failure, an empty Subscriber which can be checked with:"}]},{"type":"verbatimcommand","parts":["void callback(const std_msgs::Empty::ConstPtr& message){...}","ros::NodeHandle nodeHandle;","ros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);","if (sub)  // Enter if subscriber is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":"  "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name"},{"type":"text","text":"  "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Subscriber","name":"root/home/packages/astra_ros/astra_ros_api/n-ros/c-Subscriber","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false}}}