{"name":"root/home/packages/quori_holonomic_drive_controller/quori_holonomic_drive_controller_api/n-ros.c-NodeHandle.advertiseService","symbols":{"root/home/packages/quori_holonomic_drive_controller/quori_holonomic_drive_controller_api/n-ros.c-NodeHandle.advertiseService":{"type":"function","name":"root/home/packages/quori_holonomic_drive_controller/quori_holonomic_drive_controller_api/n-ros.c-NodeHandle.advertiseService","display_name":"advertiseService","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Advertise a service, version for arbitrary boost::function object using ros::ServiceEvent as the callback parameter type"}]},{"type":"paragraph","children":[{"type":"text","text":" Note that the template parameter S is the full event type, e.g. ros::ServiceEvent"},{"type":"text","text":"<Req"},{"type":"text","text":", Res>"}]},{"type":"paragraph","children":[{"type":"text","text":" This call connects to the master to publicize that the node will be"},{"type":"text","text":" offering an RPC service with the given name."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of advertiseService allows non-class functions, as well as functor objects and boost::bind (along with anything"},{"type":"text","text":" else boost::function supports)."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"service","direction":null,"children":[{"type":"text","text":" Service name to advertise on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"callback","direction":null,"children":[{"type":"text","text":" Callback to call when the service is called"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,"},{"type":"text","text":" and if the reference count goes to 0 the subscriber callbacks will not get called."},{"type":"text","text":" Note that setting this will cause a new reference to be added to the object before the"},{"type":"text","text":" callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore"},{"type":"text","text":" thread) that the callback is invoked from."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service."},{"type":"text","text":" On failure, an empty ServiceServer which can be checked with:"}]},{"type":"verbatimcommand","parts":["bool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)","{","  return true;","}","ros::NodeHandle nodeHandle;","Foo foo_object;","ros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);","if (service)  // Enter if advertised service is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::ServiceServer","name":"root/home/packages/quori_holonomic_drive_controller/quori_holonomic_drive_controller_api/n-ros.c-ServiceServer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false}}}