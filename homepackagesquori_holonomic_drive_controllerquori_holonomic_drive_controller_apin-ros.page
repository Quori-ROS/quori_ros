{"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros","symbols":{"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_U126Subscriber":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_U126Subscriber","display_name":"~Subscriber","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_current_expected":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_current_expected","display_name":"current_expected","ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-DataType":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-DataType","display_name":"DataType<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specialize to provide the datatype for a message"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-DataType_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getOptions","display_name":"getOptions","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the map of options created by other methods inside TransportHints"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const ros::M_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::M_string","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DefaultMessageCreator":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DefaultMessageCreator","display_name":"DefaultMessageCreator<M>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DefaultMessageCreator_m-operator()"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_RequestType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_RequestType","display_name":"RequestType","ty":{"kind":"unexposed","display_name":"MReq","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_connection_header":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_connection_header","display_name":"connection_header","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s_unknown_publisher_string_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s_unknown_publisher_string_","display_name":"s_unknown_publisher_string_","ty":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_logger_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_logger_","display_name":"logger_","ty":{"kind":"pointer","display_name":"void *","name":null,"const_qualified":false,"pointee":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_datatype":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_datatype","display_name":"datatype","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Datatype of the message we'd like to subscribe as"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_md5sum":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_md5sum","display_name":"md5sum","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" MD5 of the message datatype"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU62","display_name":"operator>","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_last_expected":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_last_expected","display_name":"last_expected","ty":{"kind":"record","display_name":"ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serialize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serialize","display_name":"serialize","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" serialize version for boost::array"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-levels":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-levels","display_name":"levels","comment":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_NodeHandle":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_NodeHandle","display_name":"NodeHandle","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Parent constructor"}]},{"type":"paragraph","children":[{"type":"text","text":" This version of the constructor takes a \"parent\" NodeHandle."},{"type":"text","text":" If the passed \"ns\" is relative (does not start with a slash), it is equivalent to calling:"},{"type":"text","text":"     "}]},{"type":"verbatimcommand","parts":["     NodeHandle child(parent.getNamespace() + \"/\" + ns, remappings);"]},{"type":"paragraph","children":[{"type":"text","text":" If the passed \"ns\" is absolute (does start with a slash), it is equivalent to calling:"},{"type":"text","text":"     "}]},{"type":"verbatimcommand","parts":["     NodeHandle child(ns, remappings);"]},{"type":"paragraph","children":[{"type":"text","text":" This version also lets you pass in name remappings that are specific to this NodeHandle"}]},{"type":"paragraph","children":[{"type":"text","text":" When a NodeHandle is copied, it inherits the namespace of the NodeHandle being copied, "},{"type":"text","text":" and increments the reference count of the global node state"},{"type":"text","text":" by 1."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException if the namespace is not a valid graph resource name"}]}],"template_args":null,"params":[{"name":"parent","ty":{"kind":"lvaluereference","display_name":"const ros::NodeHandle &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::NodeHandle","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"ns","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"remappings","ty":{"kind":"lvaluereference","display_name":"const ros::M_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::M_string","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Message":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Message","display_name":"Message","ty":{"kind":"unexposed","display_name":"typename boost::remove_reference<typename boost::remove_const<M>::type>::type","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_collection_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_collection_","display_name":"collection_","ty":{"kind":"pointer","display_name":"ros::NodeHandleBackingCollection *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::NodeHandleBackingCollection","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandleBackingCollection","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_callback_queue_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_callback_queue_","display_name":"callback_queue_","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_create":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_create","display_name":"create","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated helper function for creating an AdvertiseServiceOptions with most of its options"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"topic","direction":null,"children":[{"type":"text","text":" Topic name to subscribe to"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"queue_size","direction":null,"children":[{"type":"text","text":" Number of incoming messages to queue up for"},{"type":"text","text":"        processing (messages in excess of this queue capacity will be"},{"type":"text","text":"        discarded)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"callback","direction":null,"children":[{"type":"text","text":" The callback to invoke when a message is received on this topic"},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" The tracked object to use (see SubscribeOptions::tracked_object)"},{"type":"text","text":" "}]},{"type":"paramcommand","index":4,"parameter":"queue","direction":null,"children":[{"type":"text","text":" The callback queue to use (see SubscribeOptions::callback_queue)"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::SubscribeOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-isSystemTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-isSystemTime","display_name":"isSystemTime","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-getNumSubscribers":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-getNumSubscribers","display_name":"getNumSubscribers","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the number of subscribers that are currently connected to this Publisher"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-getROSArg":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-getROSArg","display_name":"getROSArg","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" searches the command line arguments for the given arg parameter. In case this argument is not found"},{"type":"text","text":" an empty string is returned."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"argc","direction":null,"children":[{"type":"text","text":" the number of command-line arguments"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"argv","direction":null,"children":[{"type":"text","text":" the command-line arguments"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"arg","direction":null,"children":[{"type":"text","text":" argument to search for"}]}],"template_args":null,"params":[{"name":"argc","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"argv","ty":{"kind":"pointer","display_name":"const char *const *","name":null,"const_qualified":false,"pointee":{"kind":"pointer","display_name":"const char *const","name":null,"const_qualified":true,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"elaborated":null}},{"name":"arg","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_create_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_create_","display_name":"create_","ty":{"kind":"typedef","display_name":"ros::SubscriptionCallbackHelperT::CreateFunction","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","display_name":"SteadyTimer","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_SteadyTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-hasPending","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-setPeriod","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_ImplWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_U126SteadyTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_ImplPtr"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_num_bytes":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_num_bytes","display_name":"num_bytes","ty":{"kind":"typedef","display_name":"size_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-setFixedFilterToken":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-setFixedFilterToken","display_name":"setFixedFilterToken","comment":null,"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"val","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_callback_queue":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_callback_queue","display_name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Queue to add callbacks to.  If NULL, the global callback queue will be used"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_tracked_object":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType_type":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType_type","display_name":"type","ty":{"kind":"record","display_name":"ros::message_traits::FalseType","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType","const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-construct":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-construct","display_name":"construct","comment":null,"template_args":null,"params":[{"name":"ns","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"validate_name","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_SubscribeOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_SubscribeOptions","display_name":"SubscribeOptions","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Constructor"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"_topic","direction":null,"children":[{"type":"text","text":" Topic to subscribe on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"_queue_size","direction":null,"children":[{"type":"text","text":" Number of incoming messages to queue up for"},{"type":"text","text":"        processing (messages in excess of this queue capacity will be"},{"type":"text","text":"        discarded)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"_md5sum","direction":null,"children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"_datatype","direction":null,"children":[{"type":"text","text":"   "}]}],"template_args":null,"params":[{"name":"_topic","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_queue_size","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"_md5sum","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_datatype","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidConstPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidConstPtr","display_name":"VoidConstPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_file":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_file","display_name":"file","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [input] File the message came from"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_RequestType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_RequestType","display_name":"RequestType","ty":{"kind":"unexposed","display_name":"MReq","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_hasHeader":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_hasHeader","display_name":"hasHeader","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns HasHeader"},{"type":"text","text":"<M"},{"type":"text","text":">::value;"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-getService":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-getService","display_name":"getService","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the name of the service this ServiceClient connects to"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-DataType_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-DataType_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ::dynamic_reconfigure::ReconfigureResponse &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const ::dynamic_reconfigure::ReconfigureResponse","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"dynamic_reconfigure::ReconfigureResponse","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_last_expected":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_last_expected","display_name":"last_expected","ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_SerializedMessage":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_SerializedMessage","display_name":"SerializedMessage","comment":null,"template_args":null,"params":[{"name":"buf","ty":{"kind":"elaborated","display_name":"boost::shared_array<uint8_t>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_array<uint8_t>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"num_bytes","ty":{"kind":"typedef","display_name":"size_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConnectionManager":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConnectionManager","display_name":"ConnectionManager","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_tracked_object":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_Subscription":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_Subscription","display_name":"L_Subscription","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ConnectionPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ConnectionPtr","display_name":"ConnectionPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Connection>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Connection>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createWallTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createWallTimer","display_name":"createWallTimer","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a timer which will call a callback at the specified rate, using wall time to determine"},{"type":"text","text":" when to call the callback instead of ROS time.  This variant takes"},{"type":"text","text":" a class member function, and a shared pointer to the object to call the method on."}]},{"type":"paragraph","children":[{"type":"text","text":" When the Timer (and all copies of it) returned goes out of scope, the timer will automatically"},{"type":"text","text":" be stopped, and the callback will no longer be called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"period","direction":null,"children":[{"type":"text","text":" The period at which to call the callback"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"callback","direction":null,"children":[{"type":"text","text":" The method to call"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"obj","direction":null,"children":[{"type":"text","text":" The object to call the method on.  Since this is a shared pointer, the object will"},{"type":"text","text":" automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of"},{"type":"text","text":" scope the callback will no longer be called (and therefore will not crash)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"oneshot","direction":null,"children":[{"type":"text","text":" If true, this timer will only fire once"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::WallTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_f-throwStreamOverrun":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_f-throwStreamOverrun","display_name":"throwStreamOverrun","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_topic":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_topic","display_name":"topic","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Topic to subscribe to"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent","display_name":"ServiceEvent<MReq, MRes>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Event type for services, ros::ServiceEvent"},{"type":"text","text":"<MReq"},{"type":"text","text":", MRes>"},{"type":"text","text":"&"},{"type":"text","text":" can be used in your callback instead of MReq"},{"type":"text","text":"&"},{"type":"text","text":", MRes"},{"type":"text","text":"&"}]},{"type":"paragraph","children":[{"type":"text","text":" Useful if you need to retrieve meta-data about the call, such as the full connection header, or the caller's node name"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_response_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getResponse","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_connection_header_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_RequestPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_CallbackType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ServiceEventU60MReq, MResU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_RequestType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getCallerName","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-call","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getConnectionHeader","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ResponsePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getRequest","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_request_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ResponseType"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::SteadyTimer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_defaultMessageCreateFunction":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_defaultMessageCreateFunction","display_name":"defaultMessageCreateFunction","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportPtr","display_name":"TransportPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Transport>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Transport>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_create":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_create","display_name":"create","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated helper function for creating an AdvertiseServiceOptions with all of its options"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"service","direction":null,"children":[{"type":"text","text":" Service name to advertise on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"callback","direction":null,"children":[{"type":"text","text":" The callback to invoke when the service is called"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" The tracked object to use (see AdvertiseServiceOptions::tracked_object)"},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"queue","direction":null,"children":[{"type":"text","text":" The callback queue to use (see AdvertiseServiceOptions::callback_queue)"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::AdvertiseServiceOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createWallTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createWallTimer","display_name":"createWallTimer","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a timer which will call a callback at the specified rate, using wall time to determine"},{"type":"text","text":" when to call the callback instead of ROS time.  This variant allows"},{"type":"text","text":" the full range of TimerOptions."}]},{"type":"paragraph","children":[{"type":"text","text":" When the Timer (and all copies of it) returned goes out of scope, the timer will automatically"},{"type":"text","text":" be stopped, and the callback will no longer be called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" The options to use when creating the timer"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::WallTimerOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::WallTimerOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::WallTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const MessageEvent<M> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const MessageEvent<M>","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-hasHeader":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-hasHeader","display_name":"hasHeader","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_nsec":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_nsec","display_name":"nsec","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","display_name":"WallTimer","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_ImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_U126WallTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-hasPending","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_ImplWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_WallTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-setPeriod","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operator!="]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParam":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParam","display_name":"getParam","comment":null,"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"map","ty":{"kind":"lvaluereference","display_name":"int &","name":null,"const_qualified":false,"pointee":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinnerImpl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinnerImpl","display_name":"AsyncSpinnerImpl","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceServer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_Connection":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_Connection","display_name":"S_Connection","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions","display_name":"AdvertiseOptions","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_has_header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_topic","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_callback_queue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_AdvertiseOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_disconnect_cb","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_create","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_tracked_object","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_latch","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_md5sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_message_definition","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_connect_cb","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_queue_size"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType_value":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType_value","display_name":"value","ty":{"kind":"bool","display_name":"const bool","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","display_name":"SteadyTime","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_SteadyTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-sleepUntil","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-now","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-isSystemTime"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_deserialize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_deserialize","display_name":"deserialize","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" deserialize version for boost::array"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_datatype":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_datatype","display_name":"datatype","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Datatype of the service"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_m-getLength":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_m-getLength","display_name":"getLength","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Get the total length of this tream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-MD5Sum":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-MD5Sum","display_name":"MD5Sum<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specialize to provide the md5sum for a service"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-MD5Sum_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-advertise":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-advertise","display_name":"advertise","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Advertise a topic, with full range of AdvertiseOptions"}]},{"type":"paragraph","children":[{"type":"text","text":" This call connects to the master to publicize that the node will be"},{"type":"text","text":" publishing messages on the given topic.  This method returns a Publisher that allows you to"},{"type":"text","text":" publish a message on this topic."}]},{"type":"paragraph","children":[{"type":"text","text":" This is an advanced version advertise() that exposes all options (through the AdvertiseOptions structure)"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" Advertise options to use"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a Publisher that, when it goes out of scope, will automatically release a reference"},{"type":"text","text":" on this advertisement.  On failure, an empty Publisher which can be checked with:"}]},{"type":"verbatimcommand","parts":["ros::NodeHandle nodeHandle;","ros::AdvertiseOptions ops;","...","ros::publisher pub = nodeHandle.advertise(ops);","if (pub)  // Enter if publisher is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::AdvertiseOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::AdvertiseOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::Publisher","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toSec","display_name":"toSec","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_current_real":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_current_real","display_name":"current_real","ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"cb","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceEvent::CallbackType &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ServiceEvent::CallbackType","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"params","ty":{"kind":"lvaluereference","display_name":"ServiceSpecCallParams<ros::ServiceEvent::RequestType, ros::ServiceEvent::ResponseType> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"ServiceSpecCallParams<ros::ServiceEvent::RequestType, ros::ServiceEvent::ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Adapter":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Adapter","display_name":"Adapter","ty":{"kind":"unexposed","display_name":"ParameterAdapter<P>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","display_name":"Duration","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-publish":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-publish","display_name":"publish","comment":null,"template_args":null,"params":[{"name":"serfunc","ty":{"kind":"lvaluereference","display_name":"const boost::function<SerializedMessage ()> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::function<SerializedMessage ()>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<ros::SerializedMessage ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"m","ty":{"kind":"lvaluereference","display_name":"ros::SerializedMessage &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream","display_name":"IStream","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Input stream"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_next","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_stream_type","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_IStream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_operatorU62U62"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","display_name":"ServiceServer","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_U126ServiceServer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ServiceServer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-getService","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ImplWPtr"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_has_header":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_has_header","display_name":"has_header","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Tells whether or not the message has a header.  If it does, the sequence number will be written directly into the"},{"type":"text","text":"         serialized bytes after the message has been serialized."}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-shutdown","display_name":"shutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Disconnects everything and unregisters from the master.  It is generally not"},{"type":"text","text":" necessary to call this function, as the node will automatically shutdown when all"},{"type":"text","text":" NodeHandles destruct.  However, if you want to break out of a spin() loop explicitly,"},{"type":"text","text":" this function allows that."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_initialized":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_initialized","display_name":"g_initialized","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Only exported because the macros need it.  Do not use directly."}]}],"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_helper":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_helper","display_name":"helper","ty":{"kind":"typedef","display_name":"ros::ServiceCallbackHelperPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResponseType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResponseType","display_name":"ResponseType","ty":{"kind":"unexposed","display_name":"typename Spec::ResponseType","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_TimeBaseU60T, DU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_TimeBaseU60T, DU62","display_name":"TimeBase<T, D>","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TopicManager":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TopicManager","display_name":"TopicManager","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Subscriber &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Subscriber","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-now":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-now","display_name":"now","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the current steady (monotonic) clock time."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_AdvertiseOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_AdvertiseOptions","display_name":"AdvertiseOptions","comment":null,"template_args":null,"params":[{"name":"_topic","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_queue_size","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"_md5sum","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_datatype","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_message_definition","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_connect_cb","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriberStatusCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriberStatusCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"_disconnect_cb","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriberStatusCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriberStatusCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_TokenPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_TokenPtr","display_name":"TokenPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Token>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::console::Token>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_WallRate":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_WallRate","display_name":"WallRate","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ros::Duration &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::Subscriber::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-getNumPublishers":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-getNumPublishers","display_name":"getNumPublishers","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the number of publishers this subscriber is connected to"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-isConst":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-isConst","display_name":"isConst","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Definition_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Definition_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Exception_Exception":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Exception_Exception","display_name":"Exception","comment":null,"template_args":null,"params":[{"name":"what","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::WallTimer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceClientPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceClientPtr","display_name":"ServiceClientPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ServiceClient>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceClient>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidParameterException_InvalidParameterException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidParameterException_InvalidParameterException","display_name":"InvalidParameterException","comment":null,"template_args":null,"params":[{"name":"msg","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_callback_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_callback_","display_name":"callback_","ty":{"kind":"typedef","display_name":"ros::ServiceCallbackHelperT::Callback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Transport":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Transport","display_name":"Transport","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-isConst":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-isConst","display_name":"isConst","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_type_info":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_type_info","display_name":"type_info","ty":{"kind":"pointer","display_name":"const std::type_info *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::type_info","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"std::type_info","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_api_n-std_c-type_info","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNameException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNameException","display_name":"InvalidNameException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown when an invalid graph resource name is specified to any roscpp"},{"type":"text","text":" function."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNameException_InvalidNameException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::ServiceServer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator=","display_name":"operator=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const MessageEvent<ros::MessageEvent::ConstMessage> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const MessageEvent<ros::MessageEvent::ConstMessage>","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-fromSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-fromSec","display_name":"fromSec","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_callback":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_callback","display_name":"callback","ty":{"kind":"typedef","display_name":"ros::SteadyTimerCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-MD5Sum":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-MD5Sum","display_name":"MD5Sum<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specialize to provide the md5sum for a message"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-MD5Sum_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_SubscriberLink":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_SubscriberLink","display_name":"V_SubscriberLink","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-useSystemTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-useSystemTime","display_name":"useSystemTime","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserialize_m-notify":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserialize_m-notify","display_name":"notify","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const PreDeserializeParams<M> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const PreDeserializeParams<M>","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams_event":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams_event","display_name":"event","ty":{"kind":"unexposed","display_name":"MessageEvent<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_tokens_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_tokens_","display_name":"tokens_","ty":{"kind":"typedef","display_name":"ros::console::V_Token","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_s-Printer_stream":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_s-Printer_stream","display_name":"stream","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_DURATION_MIN":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_DURATION_MIN","display_name":"DURATION_MIN","ty":{"kind":"record","display_name":"const ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_receipt_time_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_receipt_time_","display_name":"receipt_time_","ty":{"kind":"elaborated","display_name":"ros::Time","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-operatorU60U60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-operatorU60U60","display_name":"operator<<","comment":null,"template_args":null,"params":[{"name":"os","ty":{"kind":"lvaluereference","display_name":"std::ostream &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::ostream","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::ostream","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTime &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"std::ostream &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::ostream","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::ostream","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"params","ty":{"kind":"lvaluereference","display_name":"ros::SubscriptionCallbackHelperCallParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::SubscriptionCallbackHelperCallParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_MessagePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_MessagePtr","display_name":"MessagePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Message>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::MessageEvent::Message>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator-=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator-=","display_name":"operator-=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::SteadyTimer::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TopicManagerPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TopicManagerPtr","display_name":"TopicManagerPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<TopicManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::TopicManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Event":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Event","display_name":"Event","ty":{"kind":"elaborated","display_name":"ros::MessageEvent<const Message>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"MessageEvent<const ros::ParameterAdapter::Message>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-serviceClient":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-serviceClient","display_name":"serviceClient","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a client for a service, version with full range of ServiceClientOptions"}]},{"type":"paragraph","children":[{"type":"text","text":" When the last handle reference of a persistent connection is cleared, the connection will automatically close."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" The options for this service client"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::ServiceClientOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::ServiceClientOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::ServiceClient","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getReceiptTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getReceiptTime","display_name":"getReceiptTime","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the time at which this message was received"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"ros::Time","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper","display_name":"SubscriptionCallbackHelper","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Abstract base class used by subscriptions to deal with concrete message types through a common"},{"type":"text","text":" interface.  This is one part of the roscpp API that is "},{"type":"inlinecommand","command":"b","arguments":["not"],"style":"bold"},{"type":"text","text":" fully stable, so overloading this class"},{"type":"text","text":" is not recommended."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-getTypeInfo","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-isConst","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-hasHeader","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_U126SubscriptionCallbackHelper","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-deserialize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-call"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-expectedCycleTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-expectedCycleTime","display_name":"expectedCycleTime","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Get the expected cycle time -- one over the frequency passed in to the constructor"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_s_unknown_publisher_string_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_s_unknown_publisher_string_","display_name":"s_unknown_publisher_string_","ty":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-removeROSArgs":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-removeROSArgs","display_name":"removeROSArgs","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns a vector of program arguments that do not include any ROS remapping arguments.  Useful if you need"},{"type":"text","text":" to parse your arguments to determine your node name"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"argc","direction":null,"children":[{"type":"text","text":" the number of command-line arguments"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"argv","direction":null,"children":[{"type":"text","text":" the command-line arguments"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"args_out","direction":"out","children":[{"type":"text","text":" Output args, stripped of any ROS args"}]}],"template_args":null,"params":[{"name":"argc","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"argv","ty":{"kind":"pointer","display_name":"const char *const *","name":null,"const_qualified":false,"pointee":{"kind":"pointer","display_name":"const char *const","name":null,"const_qualified":true,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"elaborated":null}},{"name":"args_out","ty":{"kind":"lvaluereference","display_name":"ros::V_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"ros::V_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleSubscriberPublisher":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleSubscriberPublisher","display_name":"SingleSubscriberPublisher","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_callback":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_callback","display_name":"callback","ty":{"kind":"typedef","display_name":"ros::WallTimerCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_callback_queue":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_callback_queue","display_name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Queue to add callbacks to.  If NULL, the global callback queue will be used"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getTCPNoDelay":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getTCPNoDelay","display_name":"getTCPNoDelay","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not this TransportHints has specified TCP_NODELAY"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend","display_name":"backend","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_f-print","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_function_notifyLoggerLevelsChanged","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_function_print","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_f-notifyLoggerLevelsChanged"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_stream_type":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_stream_type","display_name":"stream_type","ty":{"kind":"typedef","display_name":"const ros::serialization::StreamType","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams","display_name":"FilterParams","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Parameter structure passed to FilterBase::isEnabled(...);.  Includes both input and output parameters"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_message","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_logger","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_level","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_out_message","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_file","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_line","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_function"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_callback_queue_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_callback_queue_","display_name":"callback_queue_","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_WallTimerCallback":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_WallTimerCallback","display_name":"WallTimerCallback","ty":{"kind":"elaborated","display_name":"boost::function<void (const WallTimerEvent &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<void (const ros::WallTimerEvent &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_ConstType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_ConstType","display_name":"ConstType","ty":{"kind":"unexposed","display_name":"typename boost::add_const<NonConstType>::type","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_expected_cycle_time_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_expected_cycle_time_","display_name":"expected_cycle_time_","ty":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_current_expected":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_current_expected","display_name":"current_expected","ty":{"kind":"record","display_name":"ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_tracked_object":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServicePublication":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServicePublication","display_name":"ServicePublication","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_deserializeMessage":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_deserializeMessage","display_name":"deserializeMessage","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Deserialize a message.  If includes_length is true, skips the first 4 bytes"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_Publisher":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_Publisher","display_name":"Publisher","comment":null,"template_args":null,"params":[{"name":"topic","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"md5sum","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"datatype","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"node_handle","ty":{"kind":"lvaluereference","display_name":"const ros::NodeHandle &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::NodeHandle","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"callbacks","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriberCallbacksPtr &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriberCallbacksPtr","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConflictingSubscriptionException_ConflictingSubscriptionException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConflictingSubscriptionException_ConflictingSubscriptionException","display_name":"ConflictingSubscriptionException","comment":null,"template_args":null,"params":[{"name":"msg","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_ConstMessage":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_ConstMessage","display_name":"ConstMessage","ty":{"kind":"unexposed","display_name":"typename boost::add_const<M>::type","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console","display_name":"console","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_formatter","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-setLogLocationLevel","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_Level","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-get_loggers","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-levels","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-checkLogLocationEnabled","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_initialized","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-setFixedFilterToken","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-vformatToBuffer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-print","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-set_logger_level","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-formatToString","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_TokenPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-notifyLoggerLevelsChanged","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-registerLogLocation","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_last_error_message","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-register_appender","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-initialize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_V_Token","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-formatToBuffer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-initializeLogLocation"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_NonConstType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_NonConstType","display_name":"NonConstType","ty":{"kind":"unexposed","display_name":"typename ParameterAdapter<P>::Message","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_last_error_message":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_last_error_message","display_name":"g_last_error_message","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Only exported because the TopicManager need it.  Do not use directly."}]}],"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_s-":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_s-","display_name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_s-","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_s-_last_duration"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-start":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-start","display_name":"start","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Start the timer.  Does nothing if the timer is already started."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU60=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU60=","display_name":"operator<=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_read":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_read","display_name":"read","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Read an object from the stream.  Normally the stream passed in here will be a ros::serialization::IStream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-udp":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-udp","display_name":"udp","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Explicitly specifies a UDP transport."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::TransportHints &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams","display_name":"ServiceCallbackHelperCallParams","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_connection_header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_request","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_response"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Header":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Header","display_name":"Header","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Timer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Timer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_m-spin":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_m-spin","display_name":"spin","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Spin on a callback queue (defaults to the global one).  Blocks until roscpp has been shutdown."}]}],"template_args":null,"params":[{"name":"queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueue *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueue","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Exception":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Exception","display_name":"Exception","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base class for all exceptions thrown by ROS"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Exception_Exception"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_md5sum":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_md5sum","display_name":"md5sum","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" MD5 of the service"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization","display_name":"serialization","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_c-StreamOverrunException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serialize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_deserialize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializationLength","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_f-throwStreamOverrun","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserialize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializeServiceResponse","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_n-stream_types","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializeMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_deserializeMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-VectorSerializer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-ArraySerializer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_StreamType"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-MD5Sum":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-MD5Sum","display_name":"MD5Sum< ::dynamic_reconfigure::ReconfigureResponse>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-MD5Sum_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-init_options":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-init_options","display_name":"init_options","comment":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SteadyTimerCallback":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SteadyTimerCallback","display_name":"SteadyTimerCallback","ty":{"kind":"elaborated","display_name":"boost::function<void (const SteadyTimerEvent &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<void (const ros::SteadyTimerEvent &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-fromSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-fromSec","display_name":"fromSec","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_U126WallTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_U126WallTimer","display_name":"~WallTimer","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ServiceEventU60MReq, MResU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ServiceEventU60MReq, MResU62","display_name":"ServiceEvent<MReq, MRes>","comment":null,"template_args":null,"params":[{"name":"req","ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<const MReq> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<const MReq>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<const MReq>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"res","ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<MRes> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<MRes>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<MRes>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"connection_header","ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<M_string> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<M_string>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token_U126Token":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token_U126Token","display_name":"~Token","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_end_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_end_","display_name":"end_","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_tc-Printer_stream":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_tc-Printer_stream","display_name":"stream","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-VectorSerializer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-VectorSerializer","display_name":"VectorSerializer<T, ContainerAllocator, Enabled>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Vector serializer.  Default implementation does nothing"}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","display_name":"ServiceClient","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_U126ServiceClient","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-isPersistent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-getService","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-call","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-deserializeFailed","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-exists","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ImplWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-waitForExistence","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ServiceClient","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_call"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_CallbackInterfacePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_CallbackInterfacePtr","display_name":"CallbackInterfacePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<CallbackInterface>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::CallbackInterface>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isSimTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isSimTime","display_name":"isSimTime","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-cycleTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-cycleTime","display_name":"cycleTime","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":"  Get the actual run time of a cycle from start to sleep"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" The runtime of the cycle"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Header":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Header","display_name":"Header<M, Enable>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Header trait.  In the default implementation pointer()"},{"type":"text","text":" returns "},{"type":"text","text":"&m"},{"type":"text","text":".header if HasHeader"},{"type":"text","text":"<M"},{"type":"text","text":">::value is true, otherwise returns NULL"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Header_m-pointer"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportUDPPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportUDPPtr","display_name":"TransportUDPPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<TransportUDP>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::TransportUDP>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_actual_cycle_time_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_actual_cycle_time_","display_name":"actual_cycle_time_","ty":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessage":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessage","display_name":"getMessage","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Retrieve the message.  If M is const, this returns a reference to it.  If M is non const"},{"type":"text","text":" and this event requires it, returns a copy.  Note that it caches this copy for later use, so it will"},{"type":"text","text":" only every make the copy once"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_ServiceClientOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_ServiceClientOptions","display_name":"ServiceClientOptions","comment":null,"template_args":null,"params":[{"name":"_service","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_md5sum","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"_persistent","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"_header","ty":{"kind":"lvaluereference","display_name":"const ros::M_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::M_string","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_topic":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_topic","display_name":"topic","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" The topic to publish on"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer","display_name":"Serializer<ros::Duration>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Serializer specialized for ros::Duration"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_read","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_m-serializedLength","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_write"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_m-init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_m-init","display_name":"init","comment":null,"template_args":null,"params":[{"name":"fmt","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-reset":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-reset","display_name":"reset","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":"  Sets the start time for the rate to now"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_message":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_message","display_name":"message","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_header":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_header","display_name":"header","ty":{"kind":"typedef","display_name":"ros::M_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Extra key/value pairs to add to the connection header"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-MD5Sum_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-MD5Sum_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ::dynamic_reconfigure::ReconfigureResponse &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const ::dynamic_reconfigure::ReconfigureResponse","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"dynamic_reconfigure::ReconfigureResponse","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_init","display_name":"init","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated convenience method for filling out md5sum/etc. based on the service type"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"_service","direction":null,"children":[{"type":"text","text":" Service name to advertise on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"_callback","direction":null,"children":[{"type":"text","text":" Callback to call when this service is called"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-sleepUntil":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-sleepUntil","display_name":"sleepUntil","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Sleep until a specific time has been reached."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" True if the desired sleep time was met, false otherwise."}]}],"template_args":null,"params":[{"name":"end","ty":{"kind":"lvaluereference","display_name":"const ros::Time &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Publisher &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Publisher","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-incrementSequence":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-incrementSequence","display_name":"incrementSequence","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-DataType":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-DataType","display_name":"DataType<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specialize to provide the datatype for a service"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-DataType_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU42":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU42","display_name":"operator*","comment":null,"template_args":null,"params":[{"name":"scale","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceCallbackHelperPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceCallbackHelperPtr","display_name":"ServiceCallbackHelperPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ServiceCallbackHelper>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceCallbackHelper>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent","display_name":"WallTimerEvent","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_current_expected","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_current_real","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_last_expected","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_s-","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_last_real","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_profile"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_transports_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_transports_","display_name":"transports_","ty":{"kind":"typedef","display_name":"ros::V_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsFixedSize":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsFixedSize","display_name":"IsFixedSize<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" A fixed-size datatype is one whose size is constant, i.e. it has no variable-length arrays or strings"}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_message_copy_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_message_copy_","display_name":"message_copy_","ty":{"kind":"typedef","display_name":"ros::MessageEvent::MessagePtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_isSimple":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_isSimple","display_name":"isSimple","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns IsSimple"},{"type":"text","text":"<M"},{"type":"text","text":">::value;"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_tc-Printer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_tc-Printer","display_name":"Printer<M>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_tc-Printer_stream"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Publisher &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Publisher","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_callback":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_callback","display_name":"callback","ty":{"kind":"typedef","display_name":"ros::TimerCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PublicationPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PublicationPtr","display_name":"PublicationPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Publication>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Publication>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_LStream":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_LStream","display_name":"LStream","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-now":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-now","display_name":"now","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Retrieve the current time.  If ROS clock time is in use, this returns the time according to the"},{"type":"text","text":" ROS clock.  Otherwise returns the current wall clock time."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU60=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU60=","display_name":"operator<=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_disconnect_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_disconnect_","display_name":"disconnect_","ty":{"kind":"typedef","display_name":"ros::SubscriberStatusCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream","display_name":"OStream","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Output stream"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_operatorU60U60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_next","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_OStream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_stream_type"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_autostart":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_autostart","display_name":"autostart","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Definition":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Definition","display_name":"Definition<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specialize to provide the definition for a message"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Definition_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackInterface":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackInterface","display_name":"CallbackInterface","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_XMLRPCManagerPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_XMLRPCManagerPtr","display_name":"XMLRPCManagerPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<XMLRPCManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::XMLRPCManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_c-StreamOverrunException_StreamOverrunException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_c-StreamOverrunException_StreamOverrunException","display_name":"StreamOverrunException","comment":null,"template_args":null,"params":[{"name":"what","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidPortException_InvalidPortException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidPortException_InvalidPortException","display_name":"InvalidPortException","comment":null,"template_args":null,"params":[{"name":"msg","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType","display_name":"FalseType","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base type for compile-type true/false tests.  Compatible with Boost.MPL.  classes inheriting from this type"},{"type":"text","text":" are "},{"type":"inlinecommand","command":"b","arguments":["false"],"style":"bold"},{"type":"text","text":" values."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType_value","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType_type"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_StringPair":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_StringPair","display_name":"StringPair","ty":{"kind":"elaborated","display_name":"std::pair<std::string, std::string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"pair<std::string, std::string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-expectedCycleTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-expectedCycleTime","display_name":"expectedCycleTime","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Get the expected cycle time -- one over the frequency passed in to the constructor"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_profile":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_profile","display_name":"profile","ty":{"kind":"elaborated","display_name":"struct (anonymous struct at /opt/ros/kinetic/include/ros/forwards.h:175:3)","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::SteadyTimerEvent::(anonymous struct at /opt/ros/kinetic/include/ros/forwards.h:175:3)","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_s-","const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_options_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_options_","display_name":"options_","ty":{"kind":"typedef","display_name":"ros::M_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Subscriber &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Subscriber","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-stop":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-stop","display_name":"stop","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Stop the timer.  Once this call returns, no more callbacks will be called.  Does"},{"type":"text","text":" nothing if the timer is already stopped."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createSteadyTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createSteadyTimer","display_name":"createSteadyTimer","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a timer which will call a callback at the specified rate, using wall time to determine"},{"type":"text","text":" when to call the callback instead of ROS time.  This variant allows"},{"type":"text","text":" the full range of TimerOptions."}]},{"type":"paragraph","children":[{"type":"text","text":" When the Timer (and all copies of it) returned goes out of scope, the timer will automatically"},{"type":"text","text":" be stopped, and the callback will no longer be called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" The options to use when creating the timer"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::SteadyTimerOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::SteadyTimerOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::SteadyTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_WallTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_WallTimer","display_name":"WallTimer","comment":null,"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"const ros::WallTimerOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallTimerOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_callback_queue":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_callback_queue","display_name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Queue to add callbacks to.  If NULL, the global callback queue will be used"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_function_print":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_function_print","display_name":"function_print","ty":{"kind":"pointer","display_name":"void (*)(void *, ::ros::console::Level, const char *, const char *, const char *, int)","name":null,"const_qualified":false,"pointee":{"kind":"functionprototype","display_name":"void (void *, ::ros::console::Level, const char *, const char *, const char *, int)","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionPtr","display_name":"SubscriptionPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Subscription>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Subscription>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_nsec":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_nsec","display_name":"nsec","ty":{"kind":"typedef","display_name":"int32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TIME_MIN":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TIME_MIN","display_name":"TIME_MIN","ty":{"kind":"record","display_name":"const ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-remapName":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-remapName","display_name":"remapName","comment":null,"template_args":null,"params":[{"name":"name","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","display_name":"SerializedMessage","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_message_start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_SerializedMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_buf","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_num_bytes","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_message","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_type_info"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isSystemTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isSystemTime","display_name":"isSystemTime","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-nonConstWillCopy":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-nonConstWillCopy","display_name":"nonConstWillCopy","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_write":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_write","display_name":"write","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Write an object to the stream.  Normally the stream passed in here will be a ros::serialization::OStream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","display_name":"TransportHints","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Provides a way of specifying network transport hints to ros::NodeHandle::subscribe() and"},{"type":"text","text":" someday ros::NodeHandle::advertise()"}]},{"type":"paragraph","children":[{"type":"text","text":" Uses the named parameter idiom, allowing you to do things like:"}]},{"type":"verbatimcommand","parts":["ros::TransportHints()","        .unreliable()","        .maxDatagramSize(1000)","        .tcpNoDelay();"]},{"type":"paragraph","children":[{"type":"text","text":" Hints for the transport type are used in the order they are specified, i.e. TransportHints().unreliable().reliable()"},{"type":"text","text":" specifies that you would prefer an unreliable transport, followed by a reliable one."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getTCPNoDelay","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-tcp","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_transports_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-maxDatagramSize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-udp","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-unreliable","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getMaxDatagramSize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-reliable","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-tcpNoDelay","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_options_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getTransports","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getOptions"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-shutdown","display_name":"shutdown","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ros_walltime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ros_walltime","display_name":"ros_walltime","comment":null,"template_args":null,"params":[{"name":"sec","ty":{"kind":"lvaluereference","display_name":"uint32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"nsec","ty":{"kind":"lvaluereference","display_name":"uint32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_OStream":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_OStream","display_name":"OStream","comment":null,"template_args":null,"params":[{"name":"data","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"count","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","display_name":"Timer","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-hasPending","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-setPeriod","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_ImplWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_ImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_U126Timer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-hasStarted","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_Timer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_impl_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation","display_name":"LogLocation","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Internal"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_logger_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_logger_enabled_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_level_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_initialized_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_response":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_response","display_name":"response","ty":{"kind":"record","display_name":"ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","display_name":"Publisher","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_ImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-isLatched","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_U126Publisher","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-incrementSequence","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-getNumSubscribers","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-publish","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-getTopic","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_publish","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_Publisher","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_ImplWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParamCached":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParamCached","display_name":"getParamCached","comment":null,"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"map","ty":{"kind":"lvaluereference","display_name":"int &","name":null,"const_qualified":false,"pointee":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_defaultServiceCreateFunction":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_defaultServiceCreateFunction","display_name":"defaultServiceCreateFunction","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-setLogLocationLevel":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-setLogLocationLevel","display_name":"setLogLocationLevel","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Internal"}]}],"template_args":null,"params":[{"name":"loc","ty":{"kind":"pointer","display_name":"ros::console::LogLocation *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::LogLocation","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"level","ty":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberCallbacksPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberCallbacksPtr","display_name":"SubscriberCallbacksPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<SubscriberCallbacks>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::SubscriberCallbacks>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_connection_header":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_connection_header","display_name":"connection_header","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-isPersistent":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-isPersistent","display_name":"isPersistent","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns true if this handle points to a persistent service, false otherwise."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_message_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_message_","display_name":"message_","ty":{"kind":"typedef","display_name":"ros::MessageEvent::ConstMessagePtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_last_expected":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_last_expected","display_name":"last_expected","ty":{"kind":"record","display_name":"ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::ServiceClient::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-setParam":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-setParam","display_name":"setParam","comment":null,"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"map","ty":{"kind":"lvaluereference","display_name":"const int &","name":null,"const_qualified":false,"pointee":{"kind":"int","display_name":"const int","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ServiceServer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_ServiceServer","display_name":"ServiceServer","comment":null,"template_args":null,"params":[{"name":"service","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"node_handle","ty":{"kind":"lvaluereference","display_name":"const ros::NodeHandle &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::NodeHandle","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits","display_name":"service_traits","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-DataType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-MD5Sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_md5sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-MD5Sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-DataType"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-isLatched":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-isLatched","display_name":"isLatched","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not this topic is latched"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase_m-isEnabled":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase_m-isEnabled","display_name":"isEnabled","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not the log statement should be printed.  Called once the message has been formatted,"},{"type":"text","text":" and allows you to change the message, logger and severity level if necessary."}]}],"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"ros::console::FilterParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::FilterParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Publisher::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer","display_name":"Serializer<T>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated serialization class.  Default implementation provides backwards compatibility with"},{"type":"text","text":" old message types."}]},{"type":"paragraph","children":[{"type":"text","text":" Specializing the Serializer class is the only thing you need to do to get the ROS serialization system"},{"type":"text","text":" to work with a type."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_write","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_m-serializedLength","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_read"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase_U126FilterBase":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase_U126FilterBase","display_name":"~FilterBase","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_datatype":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_datatype","display_name":"datatype","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns DataType"},{"type":"text","text":"<M"},{"type":"text","text":">::value(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_RequestPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_RequestPtr","display_name":"RequestPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<RequestType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceSpec::RequestType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Connection":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Connection","display_name":"V_Connection","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_level_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_level_","display_name":"level_","ty":{"kind":"elaborated","display_name":"::ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toNSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toNSec","display_name":"toNSec","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"uint64_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT","display_name":"SubscriptionCallbackHelperT<P, Enabled>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Concrete generic implementation of"},{"type":"text","text":" SubscriptionCallbackHelper for any normal message type.  Use"},{"type":"text","text":" directly with care, this is mostly for internal use."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-getTypeInfo","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-deserialize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-hasHeader","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_is_const","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Adapter","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-call","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_create_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_ConstTypePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_ConstType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_NonConstType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_SubscriptionCallbackHelperTU60P, EnabledU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-isConst","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_NonConstTypePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_callback_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Callback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_CreateFunction","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Event","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-setCreateFunction"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-stop":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-stop","display_name":"stop","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Stop the timer.  Once this call returns, no more callbacks will be called.  Does"},{"type":"text","text":" nothing if the timer is already stopped."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_Message":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_Message","display_name":"Message","ty":{"kind":"unexposed","display_name":"typename boost::remove_const<M>::type","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-MD5Sum_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-MD5Sum_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidPtr","display_name":"VoidPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<void>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<void>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ConnectionManagerPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ConnectionManagerPtr","display_name":"ConnectionManagerPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ConnectionManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ConnectionManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_stream_type":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_stream_type","display_name":"stream_type","ty":{"kind":"typedef","display_name":"const ros::serialization::StreamType","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_profile":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_profile","display_name":"profile","ty":{"kind":"elaborated","display_name":"struct (anonymous struct at /opt/ros/kinetic/include/ros/forwards.h:139:3)","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::TimerEvent::(anonymous struct at /opt/ros/kinetic/include/ros/forwards.h:139:3)","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_s-","const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_service":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_service","display_name":"service","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Service to connect to"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_buffer":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_buffer","display_name":"buffer","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType_type":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType_type","display_name":"type","ty":{"kind":"record","display_name":"ros::message_traits::TrueType","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType","const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toBoost":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toBoost","display_name":"toBoost","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"boost::posix_time::ptime","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"boost::posix_time::ptime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-boost_n-posix_time_c-ptime","const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Subscriber::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_persistent":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_persistent","display_name":"persistent","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Whether or not the connection should persist"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-setPeriod":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-setPeriod","display_name":"setPeriod","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Set the period of this timer"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"reset","direction":null,"children":[{"type":"text","text":" Whether to reset the timer. If true, timer ignores elapsed time and next cb occurs at now()+period"}]}],"template_args":null,"params":[{"name":"period","ty":{"kind":"lvaluereference","display_name":"const ros::WallDuration &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"reset","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams","display_name":"ServiceSpecCallParams<MReq, MRes>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_request","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_response","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_connection_header"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-print":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-print","display_name":"print","comment":null,"template_args":null,"params":[{"name":"filter","ty":{"kind":"pointer","display_name":"ros::console::FilterBase *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::FilterBase","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"logger","ty":{"kind":"pointer","display_name":"void *","name":null,"const_qualified":false,"pointee":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"level","ty":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"str","ty":{"kind":"lvaluereference","display_name":"const std::stringstream &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::stringstream","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::stringstream","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"file","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"line","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"function","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_m-serializedLength":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_m-serializedLength","display_name":"serializedLength","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ros::Duration &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const ros::Duration","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender_m-log":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender_m-log","display_name":"log","comment":null,"template_args":null,"params":[{"name":"level","ty":{"kind":"elaborated","display_name":"::ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"str","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"file","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"function","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"line","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_logger_enabled_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_logger_enabled_","display_name":"logger_enabled_","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-init","display_name":"init","comment":null,"template_args":null,"params":[{"name":"message","ty":{"kind":"lvaluereference","display_name":"const ros::MessageEvent::ConstMessagePtr &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::MessageEvent::ConstMessagePtr","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"connection_header","ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<M_string> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<M_string>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"receipt_time","ty":{"kind":"elaborated","display_name":"ros::Time","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"nonconst_need_copy","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"create","ty":{"kind":"lvaluereference","display_name":"const ros::MessageEvent::CreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::MessageEvent::CreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-checkLogLocationEnabled":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-checkLogLocationEnabled","display_name":"checkLogLocationEnabled","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Internal"}]}],"template_args":null,"params":[{"name":"loc","ty":{"kind":"pointer","display_name":"ros::console::LogLocation *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::LogLocation","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_disconnect_cb":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_disconnect_cb","display_name":"disconnect_cb","ty":{"kind":"typedef","display_name":"ros::SubscriberStatusCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSec","display_name":"normalizeSecNSec","comment":null,"template_args":null,"params":[{"name":"sec","ty":{"kind":"lvaluereference","display_name":"uint32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"nsec","ty":{"kind":"lvaluereference","display_name":"uint32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NoHighPerformanceTimersException_NoHighPerformanceTimersException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NoHighPerformanceTimersException_NoHighPerformanceTimersException","display_name":"NoHighPerformanceTimersException","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-FrameId":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-FrameId","display_name":"FrameId<M, Enable>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" FrameId trait.  In the default implementation pointer()"},{"type":"text","text":" returns "},{"type":"text","text":"&m"},{"type":"text","text":".header.frame_id if HasHeader"},{"type":"text","text":"<M"},{"type":"text","text":">::value is true, otherwise returns NULL.  value()"},{"type":"text","text":" does not exist, and causes a compile error"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-FrameId_m-pointer"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ServiceCallbackHelperTU60SpecU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ServiceCallbackHelperTU60SpecU62","display_name":"ServiceCallbackHelperT<Spec>","comment":null,"template_args":null,"params":[{"name":"callback","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceCallbackHelperT::Callback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ServiceCallbackHelperT::Callback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"create_req","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceCallbackHelperT::ReqCreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ServiceCallbackHelperT::ReqCreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"create_res","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceCallbackHelperT::ResCreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ServiceCallbackHelperT::ResCreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase","display_name":"DurationBase<T>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base class for Duration implementations.  Provides storage, common functions and operator overloads."},{"type":"text","text":" This should not need to be used directly."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator-=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator-","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_DurationBaseU60TU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-isZero","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_U126DurationBaseU60TU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toBoost","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_nsec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-fromSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator+=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator+","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_sec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU62=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU42=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU60=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-fromNSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toNSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU42"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializationLength":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializationLength","display_name":"serializationLength","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" serializationLength version for boost::array"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_Timer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_Timer","display_name":"Timer","comment":null,"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"const ros::TimerOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::TimerOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator+":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator+","display_name":"operator+","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const D &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const D","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator-":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator-","display_name":"operator-","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const D &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const D","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Event":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Event","display_name":"Event","ty":{"kind":"unexposed","display_name":"typename ParameterAdapter<P>::Event","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_initBySpecType":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_initBySpecType","display_name":"initBySpecType","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated convenience method for filling out md5sum/etc. based on the service spec type"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"_service","direction":null,"children":[{"type":"text","text":" Service name to advertise on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"_callback","direction":null,"children":[{"type":"text","text":" Callback to call when this service is called"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_DURATION_MAX":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_DURATION_MAX","display_name":"DURATION_MAX","ty":{"kind":"record","display_name":"const ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-initRemappings":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-initRemappings","display_name":"initRemappings","comment":null,"template_args":null,"params":[{"name":"remappings","ty":{"kind":"lvaluereference","display_name":"const ros::M_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::M_string","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_function_notifyLoggerLevelsChanged":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_function_notifyLoggerLevelsChanged","display_name":"function_notifyLoggerLevelsChanged","ty":{"kind":"pointer","display_name":"void (*)()","name":null,"const_qualified":false,"pointee":{"kind":"functionprototype","display_name":"void ()","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_oneshot":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_oneshot","display_name":"oneshot","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-hasStarted":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-hasStarted","display_name":"hasStarted","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_initByFullCallbackType":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_initByFullCallbackType","display_name":"initByFullCallbackType","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated initialization, templated on callback parameter type.  Supports any callback parameters supported by the SubscriptionCallbackAdapter"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"_topic","direction":null,"children":[{"type":"text","text":" Topic to subscribe on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"_queue_size","direction":null,"children":[{"type":"text","text":" Number of incoming messages to queue up for"},{"type":"text","text":"        processing (messages in excess of this queue capacity will be"},{"type":"text","text":"        discarded)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"_callback","direction":null,"children":[{"type":"text","text":" Callback to call when a message arrives on this topic"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResCreateFunction":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResCreateFunction","display_name":"ResCreateFunction","ty":{"kind":"elaborated","display_name":"boost::function<ResponsePtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<ros::ServiceCallbackHelperT::ResponsePtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-isZero":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-isZero","display_name":"isZero","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_timer_handle_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_m-setPeriod","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_oneshot_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_has_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_m-hasPending","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_callback_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_started_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_period_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_callback_queue_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_c-Impl_m-start"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_U126Timer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_U126Timer","display_name":"~Timer","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-get_environment_variable":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-get_environment_variable","display_name":"get_environment_variable","comment":[{"type":"paragraph","children":[{"type":"text","text":" Convenient cross platform function for returning a std::string of an"},{"type":"text","text":" environment variable."}]}],"template_args":null,"params":[{"name":"str","ty":{"kind":"lvaluereference","display_name":"std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"environment_variable","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-shutdown","display_name":"shutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Unadvertise the service associated with this ServiceServer"}]},{"type":"paragraph","children":[{"type":"text","text":" This method usually does not need to be explicitly called, as automatic shutdown happens when"},{"type":"text","text":" all copies of this ServiceServer go out of scope"}]},{"type":"paragraph","children":[{"type":"text","text":" This method overrides the automatic reference counted unadvertise, and immediately"},{"type":"text","text":" unadvertises the service associated with this ServiceServer"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-deserialize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-deserialize","display_name":"deserialize","comment":null,"template_args":null,"params":[{"name":"params","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriptionCallbackHelperDeserializeParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SubscriptionCallbackHelperDeserializeParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_SteadyTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_SteadyTimer","display_name":"SteadyTimer","comment":null,"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTimerOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SteadyTimerOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::WallTimer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_serviceClient":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_serviceClient","display_name":"serviceClient","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a client for a service, version templated on service type"}]},{"type":"paragraph","children":[{"type":"text","text":" When the last handle reference of a persistent connection is cleared, the connection will automatically close."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"service_name","direction":null,"children":[{"type":"text","text":" The name of the service to connect to"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"persistent","direction":null,"children":[{"type":"text","text":" Whether this connection should persist.  Persistent services keep the connection to the remote host active"},{"type":"text","text":"        so that subsequent calls will happen faster.  In general persistent services are discouraged, as they are not as"},{"type":"text","text":"        robust to node failure as non-persistent services."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"header_values","direction":null,"children":[{"type":"text","text":" Key/value pairs you'd like to send along in the connection handshake"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::ServiceClient","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent","display_name":"SteadyTimerEvent","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_profile","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_last_expected","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_current_expected","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_last_real","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_current_real","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_s-"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-hasPending":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-hasPending","display_name":"hasPending","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not the timer has any pending events to call."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-formatToBuffer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-formatToBuffer","display_name":"formatToBuffer","comment":null,"template_args":null,"params":[{"name":"buffer","ty":{"kind":"lvaluereference","display_name":"boost::shared_array<char> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"boost::shared_array<char>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_array<char>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"buffer_size","ty":{"kind":"lvaluereference","display_name":"size_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"size_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"fmt","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-waitForExistence":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-waitForExistence","display_name":"waitForExistence","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Wait for this service to be advertised and available.  Blocks until it is."},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"timeout","direction":null,"children":[{"type":"text","text":" The amount of time to wait for before timing out.  If timeout is -1 (default),"},{"type":"text","text":" waits until the node is shutdown"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true on success, false otherwise"}]}],"template_args":null,"params":[{"name":"timeout","ty":{"kind":"elaborated","display_name":"ros::Duration","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null}}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-reliable":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-reliable","display_name":"reliable","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specifies a reliable transport.  Currently this means TCP"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::TransportHints &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_M_string":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_M_string","display_name":"M_string","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_U126ServiceServer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_U126ServiceServer","display_name":"~ServiceServer","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-ok":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-ok","display_name":"ok","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Check whether it's time to exit."}]},{"type":"paragraph","children":[{"type":"text","text":" This method checks to see if both ros::ok() is true and shutdown() has not been called on this NodeHandle, to see whether it's yet time"},{"type":"text","text":" to exit.  ok() is false once either ros::shutdown() or NodeHandle::shutdown() have been called"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if we're still OK, false if it's time to exit"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-isValid":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-isValid","display_name":"isValid","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_allow_concurrent_callbacks":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_allow_concurrent_callbacks","display_name":"allow_concurrent_callbacks","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" By default subscription callbacks are guaranteed to arrive in-order, with only one callback happening for this subscription at any given"},{"type":"text","text":" time.  Setting this to true allows you to receive multiple messages on the same topic from multiple threads at the same time"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams","display_name":"SubscriptionCallbackHelperDeserializeParams","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_buffer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_length","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_connection_header"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_thread_count_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_thread_count_","display_name":"thread_count_","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-now":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-now","display_name":"now","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the current wall clock time."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_request":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams_request","display_name":"request","ty":{"kind":"record","display_name":"ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_U126SubscriptionCallbackHelper":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_U126SubscriptionCallbackHelper","display_name":"~SubscriptionCallbackHelper","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_AsyncSpinner":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_AsyncSpinner","display_name":"AsyncSpinner","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Constructor with custom callback queue"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"thread_count","direction":null,"children":[{"type":"text","text":" The number of threads to use.  A value of 0 means to use the number of processor cores"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"queue","direction":null,"children":[{"type":"text","text":" The callback queue to operate on.  A null value means to use the global queue"}]}],"template_args":null,"params":[{"name":"thread_count","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueue *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueue","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_U126Publisher":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_U126Publisher","display_name":"~Publisher","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_s-":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_s-","display_name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_s-","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_s-_last_duration"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::Publisher::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_md5sum":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_md5sum","display_name":"md5sum","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns MD5Sum"},{"type":"text","text":"<M"},{"type":"text","text":">::value(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-cycleTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-cycleTime","display_name":"cycleTime","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":"  Get the actual run time of a cycle from start to sleep"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" The runtime of the cycle"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_formatter":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_g_formatter","display_name":"g_formatter","ty":{"kind":"record","display_name":"ros::console::Formatter","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter","const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Only exported because the implementation need it.  Do not use directly."}]}],"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_next":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_next","display_name":"next","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Add the length of an item to this length stream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Parameter":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Parameter","display_name":"Parameter","ty":{"kind":"unexposed","display_name":"M","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_tracked_object":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams","display_name":"PreDeserializeParams<M>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams_connection_header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams_message"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-isValid":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-isValid","display_name":"isValid","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_expected_cycle_time_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_expected_cycle_time_","display_name":"expected_cycle_time_","ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU62=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU62=","display_name":"operator>=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_buf":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_buf","display_name":"buf","ty":{"kind":"elaborated","display_name":"boost::shared_array<uint8_t>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_array<uint8_t>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_m-print":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_m-print","display_name":"print","comment":null,"template_args":null,"params":[{"name":"logger_handle","ty":{"kind":"pointer","display_name":"void *","name":null,"const_qualified":false,"pointee":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"level","ty":{"kind":"elaborated","display_name":"::ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"str","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"file","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"function","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"line","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-disableAllSignalsInThisThread":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-disableAllSignalsInThisThread","display_name":"disableAllSignalsInThisThread","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_m-serializedLength":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-Serializer_m-serializedLength","display_name":"serializedLength","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Determine the serialized length of an object."}]}],"template_args":null,"params":[{"name":"t","ty":{"kind":"unexposed","display_name":"typename boost::call_traits<T>::param_type","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-isValid":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-isValid","display_name":"isValid","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-get_loggers":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-get_loggers","display_name":"get_loggers","comment":null,"template_args":null,"params":[{"name":"loggers","ty":{"kind":"lvaluereference","display_name":"int &","name":null,"const_qualified":false,"pointee":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_header":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_header","display_name":"header","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns Header"},{"type":"text","text":"<M"},{"type":"text","text":">::pointer(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const std_msgs::Header *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std_msgs::Header","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std_msgs::Header","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_timeStamp":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_timeStamp","display_name":"timeStamp","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns TimeStamp"},{"type":"text","text":"<M"},{"type":"text","text":">::pointer(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const ros::Time *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const ros::Time","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createTimer","display_name":"createTimer","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a timer which will call a callback at the specified rate.  This variant allows"},{"type":"text","text":" the full range of TimerOptions."}]},{"type":"paragraph","children":[{"type":"text","text":" When the Timer (and all copies of it) returned goes out of scope, the timer will automatically"},{"type":"text","text":" be stopped, and the callback will no longer be called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" The options to use when creating the timer"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::TimerOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TimerOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::Timer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_sec":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_sec","display_name":"sec","ty":{"kind":"typedef","display_name":"int32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-FrameId_m-pointer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-FrameId_m-pointer","display_name":"pointer","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const std::string *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration_WallDuration":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration_WallDuration","display_name":"WallDuration","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ros::Rate &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Rate","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_create":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_create","display_name":"create","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated helper function for creating an AdvertiseOptions for a message type with most options."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":null,"parameter":"M","direction":null,"children":[{"type":"text","text":" [template] Message type"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"topic","direction":null,"children":[{"type":"text","text":" Topic to publish on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"queue_size","direction":null,"children":[{"type":"text","text":" Maximum number of outgoing messages to be queued for delivery to subscribers"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"connect_cb","direction":null,"children":[{"type":"text","text":" Function to call when a subscriber connects to this topic"},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"disconnect_cb","direction":null,"children":[{"type":"text","text":" Function to call when a subscriber disconnects from this topic"},{"type":"text","text":" "}]},{"type":"paramcommand","index":4,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" tracked object to use (see AdvertiseOptions::tracked_object)"},{"type":"text","text":" "}]},{"type":"paramcommand","index":5,"parameter":"queue","direction":null,"children":[{"type":"text","text":" The callback queue to use (see AdvertiseOptions::callback_queue)"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" an AdvertiseOptions which embodies the parameters"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::AdvertiseOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessageWillCopy":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessageWillCopy","display_name":"getMessageWillCopy","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_s-":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_s-","display_name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_s-","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_s-_last_duration"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-initialize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-initialize","display_name":"initialize","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Don't call this directly.  Performs any required initialization/configuration.  Happens automatically when using the macro API."}]},{"type":"paragraph","children":[{"type":"text","text":" If you're going to be using log4cxx or any of the ::ros::console functions, and need the system to be initialized, use the"},{"type":"text","text":" ROSCONSOLE_AUTOINIT macro."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_m-advance":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_m-advance","display_name":"advance","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" increment the length by len"}]}],"template_args":null,"params":[{"name":"len","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_IStream":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_IStream","display_name":"IStream","comment":null,"template_args":null,"params":[{"name":"data","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"count","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_CreateFunction":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_CreateFunction","display_name":"CreateFunction","ty":{"kind":"elaborated","display_name":"boost::function<MessagePtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<ros::MessageEvent::MessagePtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-stop":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-stop","display_name":"stop","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Stop the timer.  Once this call returns, no more callbacks will be called.  Does"},{"type":"text","text":" nothing if the timer is already stopped."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-start":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-start","display_name":"start","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Actually starts the internals of the node (spins up threads, starts the network polling and xmlrpc loops,"},{"type":"text","text":" connects to internal subscriptions like /clock, starts internal service servers, etc.)."}]},{"type":"paragraph","children":[{"type":"text","text":" Usually unnecessary to call manually, as it is automatically called by the creation of the first NodeHandle if"},{"type":"text","text":" the node has not already been started.  If you would like to prevent the automatic shutdown caused by the last"},{"type":"text","text":" NodeHandle going out of scope, call this before any NodeHandle has been created (e.g. immediately after init())"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-shutdown","display_name":"shutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Unsubscribe the callback associated with this Subscriber"}]},{"type":"paragraph","children":[{"type":"text","text":" This method usually does not need to be explicitly called, as automatic shutdown happens when"},{"type":"text","text":" all copies of this Subscriber go out of scope"}]},{"type":"paragraph","children":[{"type":"text","text":" This method overrides the automatic reference counted unsubscribe, and immediately"},{"type":"text","text":" unsubscribes the callback associated with this Subscriber"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PublisherLinkPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PublisherLinkPtr","display_name":"PublisherLinkPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<PublisherLink>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::PublisherLink>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_subscribe":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_subscribe","display_name":"subscribe","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Subscribe to a topic, version for arbitrary boost::function object"}]},{"type":"paragraph","children":[{"type":"text","text":" This method connects to the master to register interest in a given"},{"type":"text","text":" topic.  The node will automatically be connected with publishers on"},{"type":"text","text":" this topic.  On each message receipt, callback is invoked and passed a shared pointer"},{"type":"text","text":" to the message received.  This message should "},{"type":"inlinecommand","command":"b","arguments":["not"],"style":"bold"},{"type":"text","text":" be changed in place, as it"},{"type":"text","text":" is shared with any other subscriptions to this topic."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of subscribe allows anything bindable to a boost::function object"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":null,"parameter":"M","direction":null,"children":[{"type":"text","text":" [template] the message type"},{"type":"text","text":" "}]},{"type":"paramcommand","index":null,"parameter":"C","direction":null,"children":[{"type":"text","text":" [template] the callback parameter type (e.g. const boost::shared_ptr"},{"type":"text","text":"<M"},{"type":"text","text":" const>"},{"type":"text","text":"&"},{"type":"text","text":" or const M"},{"type":"text","text":"&"},{"type":"text","text":")"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"topic","direction":null,"children":[{"type":"text","text":" Topic to subscribe to"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"queue_size","direction":null,"children":[{"type":"text","text":" Number of incoming messages to queue up for"},{"type":"text","text":" processing (messages in excess of this queue capacity will be"},{"type":"text","text":" discarded)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"callback","direction":null,"children":[{"type":"text","text":" Callback to call when a message has arrived"},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,"},{"type":"text","text":" and if the reference count goes to 0 the subscriber callbacks will not get called."},{"type":"text","text":" Note that setting this will cause a new reference to be added to the object before the"},{"type":"text","text":" callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore"},{"type":"text","text":" thread) that the callback is invoked from."},{"type":"text","text":" "}]},{"type":"paramcommand","index":4,"parameter":"transport_hints","direction":null,"children":[{"type":"text","text":" a TransportHints structure which defines various transport-related options"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic."},{"type":"text","text":" On failure, an empty Subscriber which can be checked with:"}]},{"type":"verbatimcommand","parts":["void callback(const std_msgs::Empty::ConstPtr& message){...}","ros::NodeHandle nodeHandle;","ros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);","if (sub)  // Enter if subscriber is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":"  "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name"},{"type":"text","text":"  "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Subscriber","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator-=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator-=","display_name":"operator-=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const D &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const D","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_remappings_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_remappings_","display_name":"remappings_","ty":{"kind":"typedef","display_name":"ros::M_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-exists":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-exists","display_name":"exists","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Checks if this is both advertised and available."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the service is up and available, false otherwise"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_current_expected":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_current_expected","display_name":"current_expected","ty":{"kind":"record","display_name":"ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_stream_type":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_stream_type","display_name":"stream_type","ty":{"kind":"typedef","display_name":"const ros::serialization::StreamType","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_sec":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_sec","display_name":"sec","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_m-getParameter":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_m-getParameter","display_name":"getParameter","comment":null,"template_args":null,"params":[{"name":"event","ty":{"kind":"lvaluereference","display_name":"const ros::ParameterAdapter::Event &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ParameterAdapter::Event","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"typedef","display_name":"ros::ParameterAdapter::Parameter","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_CreateFunction":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_CreateFunction","display_name":"CreateFunction","ty":{"kind":"elaborated","display_name":"boost::function<NonConstTypePtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<ros::SubscriptionCallbackHelperT::NonConstTypePtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros","display_name":"ros","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Publisher","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PublicationPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_defaultServiceCreateFunction","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSecUnsigned","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_Connection","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSecSigned","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Connection","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-spin","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceClientPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PublisherLinkPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportUDP","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_SubscriberLink","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidConstPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_PublisherLink","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceCallbackHelperPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VP_string","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-requestShutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Exception","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TIME_MAX","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_string","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-PollManager","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PollManagerPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServicePublication","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_StringPair","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_M_stringPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberCallbacksPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServerLink","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_ServiceServer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-disableAllSignalsInThisThread","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_NodeHandlePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DefaultMessageCreator","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_AsyncSpinnerImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-init_options","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscription","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_ServicePublication","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-removeROSArgs","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ros_steadytime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleThreadedSpinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ok","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_ServiceServerLink","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServicePublicationPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportTCPPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-PublisherLink","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportUDPPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidParameterException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConflictingSubscriptionException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriberLink","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleSubscriberPublisher","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionCallbackHelperPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberLinkPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s_unknown_publisher_string_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isInitialized","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publication","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_Subscription","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_defaultMessageCreateFunction","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-waitForShutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConnectionManager","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidPortException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TIME_MIN","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_string","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Connection","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-XMLRPCManager","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ConnectionPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-get_environment_variable","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isStarted","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_ServicePublication","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_CallbackInterfacePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SteadyTimerCallback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_DURATION_MAX","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportTCP","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NoHighPerformanceTimersException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_M_string","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_XMLRPCManagerPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandleBackingCollection","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Publication","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Transport","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TopicManager","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Subscriber","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ros_walltime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_InitOption","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNameException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TimeNotInitializedException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinnerImpl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isShuttingDown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidConstWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TopicManagerPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_Subscription","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceManagerPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-getGlobalCallbackQueue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-operatorU60U60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceServerLinkPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackInterface","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNodeNameException","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberStatusCallback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_DURATION_MIN","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceManager","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ConnectionManagerPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TimerCallback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_WallTimerCallback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-spinOnce","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-getROSArg","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Subscription"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_U126DurationBaseU60TU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_U126DurationBaseU60TU62","display_name":"~DurationBase<T>","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNodeNameException_InvalidNodeNameException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNodeNameException_InvalidNodeNameException","display_name":"InvalidNodeNameException","comment":null,"template_args":null,"params":[{"name":"name","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"reason","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-shutdown","display_name":"shutdown","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-fromNSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-fromNSec","display_name":"fromNSec","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"typedef","display_name":"int64_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_InitOption":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_InitOption","display_name":"InitOption","ty":{"kind":"elaborated","display_name":"init_options::InitOption","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"enum","display_name":"ros::init_options::InitOption","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConnectionHeaderPtr":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConnectionHeaderPtr","display_name":"getConnectionHeaderPtr","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<M_string> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<M_string>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PollManagerPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_PollManagerPtr","display_name":"PollManagerPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<PollManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::PollManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_m-hasStarted","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_oneshot_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_callback_queue_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_started_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_callback_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_period_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_m-hasPending","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_has_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_m-setPeriod","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_m-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_c-Impl_timer_handle_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions","display_name":"WallTimerOptions","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_callback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_oneshot","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_autostart","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_period","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_callback_queue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_WallTimerOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_tracked_object"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_SubscriptionCallbackHelperTU60P, EnabledU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_SubscriptionCallbackHelperTU60P, EnabledU62","display_name":"SubscriptionCallbackHelperT<P, Enabled>","comment":null,"template_args":null,"params":[{"name":"callback","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriptionCallbackHelperT::Callback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriptionCallbackHelperT::Callback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"create","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriptionCallbackHelperT::CreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriptionCallbackHelperT::CreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_ImplWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_ImplWPtr","display_name":"ImplWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::Timer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_logger":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_logger","display_name":"logger","ty":{"kind":"pointer","display_name":"void *","name":null,"const_qualified":false,"pointee":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [input/output] Handle identifying logger that this message will be output to.  If changed, uses the new logger"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceServer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceServer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ros_steadytime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ros_steadytime","display_name":"ros_steadytime","comment":null,"template_args":null,"params":[{"name":"sec","ty":{"kind":"lvaluereference","display_name":"uint32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"nsec","ty":{"kind":"lvaluereference","display_name":"uint32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType_value":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType_value","display_name":"value","ty":{"kind":"bool","display_name":"const bool","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsMessage":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsMessage","display_name":"IsMessage<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Am I message or not"}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_U126NodeHandle":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_U126NodeHandle","display_name":"~NodeHandle","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Destructor"}]},{"type":"paragraph","children":[{"type":"text","text":" When a NodeHandle is destroyed, it decrements a global reference"},{"type":"text","text":" count by 1, and if the reference count is now 0, shuts down the"},{"type":"text","text":" node."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_SubscriberCallbacks":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_SubscriberCallbacks","display_name":"SubscriberCallbacks","comment":null,"template_args":null,"params":[{"name":"connect","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriberStatusCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriberStatusCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"disconnect","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriberStatusCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriberStatusCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"tracked_object","ty":{"kind":"lvaluereference","display_name":"const ros::VoidConstPtr &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::VoidConstPtr","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberStatusCallback":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberStatusCallback","display_name":"SubscriberStatusCallback","ty":{"kind":"elaborated","display_name":"boost::function<void (const SingleSubscriberPublisher &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<void (const ros::SingleSubscriberPublisher &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_AsyncSpinnerImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_AsyncSpinnerImplPtr","display_name":"AsyncSpinnerImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<AsyncSpinnerImpl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::AsyncSpinnerImpl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_md5sum":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_md5sum","display_name":"md5sum","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" The md5sum of the message datatype published on this topic"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getCallbackQueue":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getCallbackQueue","display_name":"getCallbackQueue","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the callback queue associated with this"},{"type":"text","text":" NodeHandle.  If none has been explicitly set, returns the global"},{"type":"text","text":" queue."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_transport_hints":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_transport_hints","display_name":"transport_hints","ty":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Hints for transport type and options"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-IsFixedSize":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-IsFixedSize","display_name":"IsFixedSize<bool>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base type for compile-type true/false tests.  Compatible with Boost.MPL.  classes inheriting from this type"},{"type":"text","text":" are "},{"type":"inlinecommand","command":"b","arguments":["true"],"style":"bold"},{"type":"text","text":" values."}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_MessageEventU60MU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_MessageEventU60MU62","display_name":"MessageEvent<M>","comment":null,"template_args":null,"params":[{"name":"message","ty":{"kind":"lvaluereference","display_name":"const ros::MessageEvent::ConstMessagePtr &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::MessageEvent::ConstMessagePtr","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"connection_header","ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<M_string> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<M_string>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"receipt_time","ty":{"kind":"elaborated","display_name":"ros::Time","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"nonconst_need_copy","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"create","ty":{"kind":"lvaluereference","display_name":"const ros::MessageEvent::CreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::MessageEvent::CreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter","display_name":"ParameterAdapter<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Generally not for outside use.  Adapts a function parameter type into the message type, event type and parameter.  Allows you to"},{"type":"text","text":" retrieve a parameter type from an event type."}]},{"type":"paragraph","children":[{"type":"text","text":" ParameterAdapter is generally only useful for outside use when implementing things that require message callbacks"},{"type":"text","text":" (such as the message_filters package)and you would like to support all the roscpp message parameter types"}]},{"type":"paragraph","children":[{"type":"text","text":" The ParameterAdapter is templated on the callback parameter type ("},{"type":"inlinecommand","command":"b","arguments":["not"],"style":"bold"},{"type":"text","text":" the bare message type), and provides 3 things:"},{"type":"text","text":"  - Message typedef, which provides the bare message type, no const or reference qualifiers"},{"type":"text","text":"  - Event typedef, which provides the ros::MessageEvent type"},{"type":"text","text":"  - Parameter typedef, which provides the actual parameter type (may be slightly different from M)"},{"type":"text","text":"  - static getParameter(event) function, which returns a parameter type given the event"},{"type":"text","text":"  - static bool is_const informs you whether or not the parameter type is a const message"}]},{"type":"paragraph","children":[{"type":"text","text":"  ParameterAdapter is specialized to allow callbacks of any of the forms:"}]},{"type":"verbatimcommand","parts":["void callback(const boost::shared_ptr<M const>&);","void callback(const boost::shared_ptr<M>&);","void callback(boost::shared_ptr<M const>);","void callback(boost::shared_ptr<M>);","void callback(const M&);","void callback(M);","void callback(const MessageEvent<M const>&);","void callback(const MessageEvent<M>&);"]},{"type":"paragraph","children":[{"type":"text","text":" "}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Message","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Event","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_Parameter","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_m-getParameter","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_is_const"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks","display_name":"SubscriberCallbacks","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_disconnect_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_has_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_SubscriberCallbacks","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_callback_queue_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_connect_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_callback_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_callback_","display_name":"callback_","ty":{"kind":"typedef","display_name":"ros::SubscriptionCallbackHelperT::Callback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-setPeriod":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-setPeriod","display_name":"setPeriod","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Set the period of this timer"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"reset","direction":null,"children":[{"type":"text","text":" Whether to reset the timer. If true, timer ignores elapsed time and next cb occurs at now()+period"}]}],"template_args":null,"params":[{"name":"period","ty":{"kind":"lvaluereference","display_name":"const ros::Duration &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"reset","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::AsyncSpinnerImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceServer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceServer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Timer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Timer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-canStart":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-canStart","display_name":"canStart","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Check if the spinner can be started. The spinner shouldn't be started if"},{"type":"text","text":" another single-threaded spinner is already operating on the callback queue."}]},{"type":"paragraph","children":[{"type":"text","text":" This function is not necessary anymore. start() will always try to start spinning"},{"type":"text","text":" and throw a std::runtime_error if it failed."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberLinkPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriberLinkPtr","display_name":"SubscriberLinkPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<SubscriberLink>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::SubscriberLink>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VP_string":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VP_string","display_name":"VP_string","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_f-notifyLoggerLevelsChanged":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_f-notifyLoggerLevelsChanged","display_name":"notifyLoggerLevelsChanged","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializeMessage":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializeMessage","display_name":"serializeMessage","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Serialize a message"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserialize":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserialize","display_name":"PreDeserialize<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" called by the SubscriptionCallbackHelper after a message is"},{"type":"text","text":" instantiated but before that message is deserialized"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserialize_m-notify"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_tracked_object":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_frameId":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_frameId","display_name":"frameId","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns FrameId"},{"type":"text","text":"<M"},{"type":"text","text":">::pointer(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const std::string *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ReqCreateFunction":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ReqCreateFunction","display_name":"ReqCreateFunction","ty":{"kind":"elaborated","display_name":"boost::function<RequestPtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<ros::ServiceCallbackHelperT::RequestPtr ()>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions","display_name":"TimerOptions","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_period","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_TimerOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_tracked_object","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_oneshot","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_callback_queue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_callback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_autostart"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-reset":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-reset","display_name":"reset","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":"  Sets the start time for the rate to now"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_format_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_format_","display_name":"format_","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_line":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_line","display_name":"line","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [input] Line the message came from"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-IsSimple":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-IsSimple","display_name":"IsSimple<ros::Duration>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base type for compile-type true/false tests.  Compatible with Boost.MPL.  classes inheriting from this type"},{"type":"text","text":" are "},{"type":"inlinecommand","command":"b","arguments":["true"],"style":"bold"},{"type":"text","text":" values."}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator+":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator+","display_name":"operator+","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::WallTimer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_autostart":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_autostart","display_name":"autostart","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-getData":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-getData","display_name":"getData","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_n-stream_types":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_n-stream_types","display_name":"stream_types","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Enum"}]}],"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceClient::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","display_name":"WallTime","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-isSystemTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-sleepUntil","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_WallTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-now"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-set_logger_level":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-set_logger_level","display_name":"set_logger_level","comment":null,"template_args":null,"params":[{"name":"name","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"level","ty":{"kind":"elaborated","display_name":"levels::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"enum","display_name":"ros::console::levels::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNameException_InvalidNameException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNameException_InvalidNameException","display_name":"InvalidNameException","comment":null,"template_args":null,"params":[{"name":"msg","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_callback_queue":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_callback_queue","display_name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Queue to add callbacks to.  If NULL, the global callback queue will be used"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions","display_name":"AdvertiseServiceOptions","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_res_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_callback_queue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_helper","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_service","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_tracked_object","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_req_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_md5sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_initBySpecType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_create","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_AdvertiseServiceOptions"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriberLink":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriberLink","display_name":"SubscriberLink","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-spinOnce":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-spinOnce","display_name":"spinOnce","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Process a single round of callbacks."}]},{"type":"paragraph","children":[{"type":"text","text":" This method is useful if you have your own loop running and would like to process"},{"type":"text","text":" any callbacks that are available.  This is equivalent to calling callAvailable() on the"},{"type":"text","text":" global CallbackQueue.  It will not process any callbacks that have been assigned to"},{"type":"text","text":" custom queues."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_connection_header":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_connection_header","display_name":"connection_header","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams_message":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams_message","display_name":"message","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceClient &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceClient","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-MD5Sum_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-MD5Sum_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidWPtr","display_name":"VoidWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<void>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<void>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Header_m-pointer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Header_m-pointer","display_name":"pointer","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const std_msgs::Header *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std_msgs::Header","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std_msgs::Header","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_publish":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_publish","display_name":"publish","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Publish a message on the topic associated with this Publisher."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidPortException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidPortException","display_name":"InvalidPortException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown when an invalid port is specified"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidPortException_InvalidPortException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_s-no_validate":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_s-no_validate","display_name":"no_validate","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-unreliable":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-unreliable","display_name":"unreliable","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Specifies an unreliable transport.  Currently this means UDP."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::TransportHints &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportUDP":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportUDP","display_name":"TransportUDP","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender","display_name":"LogAppender","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender_m-log","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender_U126LogAppender"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessageFactory":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessageFactory","display_name":"getMessageFactory","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const ros::MessageEvent::CreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::MessageEvent::CreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-hasHeader":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-hasHeader","display_name":"hasHeader","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createSteadyTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createSteadyTimer","display_name":"createSteadyTimer","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a timer which will call a callback at the specified rate, using wall time to determine"},{"type":"text","text":" when to call the callback instead of ROS time.  This variant takes"},{"type":"text","text":" a class member function, and a shared pointer to the object to call the method on."}]},{"type":"paragraph","children":[{"type":"text","text":" When the Timer (and all copies of it) returned goes out of scope, the timer will automatically"},{"type":"text","text":" be stopped, and the callback will no longer be called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"period","direction":null,"children":[{"type":"text","text":" The period at which to call the callback"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"callback","direction":null,"children":[{"type":"text","text":" The method to call"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"obj","direction":null,"children":[{"type":"text","text":" The object to call the method on.  Since this is a shared pointer, the object will"},{"type":"text","text":" automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of"},{"type":"text","text":" scope the callback will no longer be called (and therefore will not crash)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"oneshot","direction":null,"children":[{"type":"text","text":" If true, this timer will only fire once"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::SteadyTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate","display_name":"WallRate","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_expected_cycle_time_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_WallRate","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-cycleTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-reset","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-sleep","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_start_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_actual_cycle_time_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-expectedCycleTime"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-register_appender":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-register_appender","display_name":"register_appender","comment":null,"template_args":null,"params":[{"name":"appender","ty":{"kind":"pointer","display_name":"ros::console::LogAppender *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::LogAppender","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions","display_name":"ServiceClientOptions","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Encapsulates all options available for creating a ServiceClient"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_md5sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_persistent","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_ServiceClientOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_service"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-tcpNoDelay":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-tcpNoDelay","display_name":"tcpNoDelay","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" If a TCP transport is used, specifies whether or not to use TCP_NODELAY to provide"},{"type":"text","text":" a potentially lower-latency connection."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"nodelay","direction":null,"children":[{"type":"text","text":" [optional] Whether or not to use TCP_NODELAY.  Defaults to true."}]}],"template_args":null,"params":[{"name":"nodelay","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"ros::TransportHints &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token_m-getString":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token_m-getString","display_name":"getString","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"pointer","display_name":"void *","name":null,"const_qualified":false,"pointee":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"","ty":{"kind":"elaborated","display_name":"::ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_message_definition":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_message_definition","display_name":"message_definition","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" The full definition of the message published on this topic"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_start_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_start_","display_name":"start_","ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_M_stringPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_M_stringPtr","display_name":"M_stringPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate","display_name":"Rate","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_start_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_Rate","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_expected_cycle_time_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_actual_cycle_time_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-cycleTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-sleep","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-reset","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-expectedCycleTime"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServerLink":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServerLink","display_name":"ServiceServerLink","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-start":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-start","display_name":"start","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Start the timer.  Does nothing if the timer is already started."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-notifyLoggerLevelsChanged":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-notifyLoggerLevelsChanged","display_name":"notifyLoggerLevelsChanged","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Tells the system that a logger's level has changed"}]},{"type":"paragraph","children":[{"type":"text","text":" This must be called if a log4cxx::Logger's level has been changed in the middle of an application run."},{"type":"text","text":" Because of the way the static guard for enablement works, if a logger's level is changed and this"},{"type":"text","text":" function is not called, only logging statements which are first hit *after* the change will be correct wrt"},{"type":"text","text":" that logger."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConflictingSubscriptionException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConflictingSubscriptionException","display_name":"ConflictingSubscriptionException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown when a second (third,...) subscription is attempted with conflicting"},{"type":"text","text":" arguments."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ConflictingSubscriptionException_ConflictingSubscriptionException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Timer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Timer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResponsePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResponsePtr","display_name":"ResponsePtr","ty":{"kind":"unexposed","display_name":"typename Spec::ResponsePtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-hasPending":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-hasPending","display_name":"hasPending","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not the timer has any pending events to call."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTimer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SteadyTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::ServiceServer::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ResponseType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ResponseType","display_name":"ResponseType","ty":{"kind":"unexposed","display_name":"MRes","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Connection":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Connection","display_name":"Connection","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_TimerOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_TimerOptions","display_name":"TimerOptions","comment":null,"template_args":null,"params":[{"name":"_period","ty":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null}},{"name":"_callback","ty":{"kind":"lvaluereference","display_name":"const ros::TimerCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::TimerCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"oneshot","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"autostart","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::WallTimer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-subscribe":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-subscribe","display_name":"subscribe","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Subscribe to a topic, version with full range of SubscribeOptions"}]},{"type":"paragraph","children":[{"type":"text","text":" This method connects to the master to register interest in a given"},{"type":"text","text":" topic.  The node will automatically be connected with publishers on"},{"type":"text","text":" this topic.  On each message receipt, fp is invoked and passed a shared pointer"},{"type":"text","text":" to the message received.  This message should "},{"type":"inlinecommand","command":"b","arguments":["not"],"style":"bold"},{"type":"text","text":" be changed in place, as it"},{"type":"text","text":" is shared with any other subscriptions to this topic."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of subscribe allows the full range of options, exposed through the SubscribeOptions class"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" Subscribe options"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic."},{"type":"text","text":" On failure, an empty Subscriber which can be checked with:"}]},{"type":"verbatimcommand","parts":["SubscribeOptions ops;","...","ros::NodeHandle nodeHandle;","ros::Subscriber sub = nodeHandle.subscribe(ops);","if (sub)  // Enter if subscriber is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":"  "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name"},{"type":"text","text":"  "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::SubscribeOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::SubscribeOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::Subscriber","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_copyMessageIfNecessary":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_copyMessageIfNecessary","display_name":"copyMessageIfNecessary","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"unexposed","display_name":"typename boost::enable_if<boost::is_void<M2>, boost::shared_ptr<M>>::type","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper_U126ServiceCallbackHelper":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper_U126ServiceCallbackHelper","display_name":"~ServiceCallbackHelper","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-tcp":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-tcp","display_name":"tcp","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Explicitly specifies the TCP transport"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::TransportHints &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getMaxDatagramSize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getMaxDatagramSize","display_name":"getMaxDatagramSize","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the maximum datagram size specified on this TransportHints, or 0 if"},{"type":"text","text":" no size was specified."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-operator=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-operator=","display_name":"operator=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::NodeHandle &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::NodeHandle","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"ros::NodeHandle &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::NodeHandle","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_nonconst_need_copy_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_nonconst_need_copy_","display_name":"nonconst_need_copy_","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceManagerPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceManagerPtr","display_name":"ServiceManagerPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ServiceManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceManager>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"params","ty":{"kind":"lvaluereference","display_name":"ros::ServiceCallbackHelperCallParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::ServiceCallbackHelperCallParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-getLength":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-getLength","display_name":"getLength","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the amount of space left in the stream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Callback":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_Callback","display_name":"Callback","ty":{"kind":"elaborated","display_name":"boost::function<void (typename Adapter::Parameter)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<void (typename Adapter::Parameter)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_out_message":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_out_message","display_name":"out_message","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [output] If set, writes this message instead of the original"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNodeNameException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNodeNameException","display_name":"InvalidNodeNameException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown when an invalid node name is specified to ros::init()"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidNodeNameException_InvalidNodeNameException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toNSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toNSec","display_name":"toNSec","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"typedef","display_name":"int64_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator+=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator+=","display_name":"operator+=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Subscriber &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Subscriber","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_started_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_oneshot_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_m-hasPending","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_callback_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_m-setPeriod","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_timer_handle_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_has_tracked_object_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_callback_queue_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_m-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_c-Impl_period_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-formatToString":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-formatToString","display_name":"formatToString","comment":null,"template_args":null,"params":[{"name":"fmt","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-setNow":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-setNow","display_name":"setNow","comment":null,"template_args":null,"params":[{"name":"new_now","ty":{"kind":"lvaluereference","display_name":"const ros::Time &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams","display_name":"SubscriptionCallbackHelperCallParams","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams_event"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-getService":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-getService","display_name":"getService","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","display_name":"Time","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_Time","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-waitForValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-setNow","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-now","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-sleepUntil","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isSimTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-useSystemTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-fromBoost","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isSystemTime"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_Time":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_Time","display_name":"Time","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getResponse":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getResponse","display_name":"getResponse","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns a non-const reference to the response"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::ServiceEvent::ResponseType &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"ros::ServiceEvent::ResponseType","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionCallbackHelperPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionCallbackHelperPtr","display_name":"SubscriptionCallbackHelperPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<SubscriptionCallbackHelper>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::SubscriptionCallbackHelper>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-deleteParam":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-deleteParam","display_name":"deleteParam","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Delete a parameter from the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to delete."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the deletion succeeded, false otherwise."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-getTopic":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-getTopic","display_name":"getTopic","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the topic that this Publisher will publish on."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner","display_name":"Spinner","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Abstract interface for classes which spin on a callback queue."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner_U126Spinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner_m-spin"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_message_start":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage_message_start","display_name":"message_start","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isInitialized":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isInitialized","display_name":"isInitialized","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not ros::init() has been called"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender_U126LogAppender":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-LogAppender_U126LogAppender","display_name":"~LogAppender","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_advertiseService":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_advertiseService","display_name":"advertiseService","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Advertise a service, version for arbitrary boost::function object using ros::ServiceEvent as the callback parameter type"}]},{"type":"paragraph","children":[{"type":"text","text":" Note that the template parameter S is the full event type, e.g. ros::ServiceEvent"},{"type":"text","text":"<Req"},{"type":"text","text":", Res>"}]},{"type":"paragraph","children":[{"type":"text","text":" This call connects to the master to publicize that the node will be"},{"type":"text","text":" offering an RPC service with the given name."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of advertiseService allows non-class functions, as well as functor objects and boost::bind (along with anything"},{"type":"text","text":" else boost::function supports)."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"service","direction":null,"children":[{"type":"text","text":" Service name to advertise on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"callback","direction":null,"children":[{"type":"text","text":" Callback to call when the service is called"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,"},{"type":"text","text":" and if the reference count goes to 0 the subscriber callbacks will not get called."},{"type":"text","text":" Note that setting this will cause a new reference to be added to the object before the"},{"type":"text","text":" callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore"},{"type":"text","text":" thread) that the callback is invoked from."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service."},{"type":"text","text":" On failure, an empty ServiceServer which can be checked with:"}]},{"type":"verbatimcommand","parts":["bool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)","{","  return true;","}","ros::NodeHandle nodeHandle;","Foo foo_object;","ros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);","if (service)  // Enter if advertised service is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::ServiceServer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-sleepUntil":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-sleepUntil","display_name":"sleepUntil","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Sleep until a specific time has been reached."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" True if the desired sleep time was met, false otherwise."}]}],"template_args":null,"params":[{"name":"end","ty":{"kind":"lvaluereference","display_name":"const ros::WallTime &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DefaultMessageCreator_m-operator()":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DefaultMessageCreator_m-operator()","display_name":"operator()","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<M>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent","display_name":"TimerEvent","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_profile","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_last_expected","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_last_real","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_current_expected","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_current_real","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_s-"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","display_name":"WallDuration","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration_WallDuration","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration_m-sleep"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_WallTimerOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_WallTimerOptions","display_name":"WallTimerOptions","comment":null,"template_args":null,"params":[{"name":"_period","ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null}},{"name":"_callback","ty":{"kind":"lvaluereference","display_name":"const ros::WallTimerCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::WallTimerCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"oneshot","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"autostart","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_CallbackType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_CallbackType","display_name":"CallbackType","ty":{"kind":"elaborated","display_name":"boost::function<bool (ServiceEvent<RequestType, ResponseType> &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<bool (ServiceEvent<ros::ServiceEvent::RequestType, ros::ServiceEvent::ResponseType> &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_next":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_next","display_name":"next","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Deserialize an item from this input stream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner","display_name":"MultiThreadedSpinner","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Spinner which spins in multiple threads."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_MultiThreadedSpinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_m-spin","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_thread_count_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_Rate":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_Rate","display_name":"Rate","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ros::Duration &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getNamespace":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getNamespace","display_name":"getNamespace","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the namespace associated with this NodeHandle"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_start_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_start_","display_name":"start_","ty":{"kind":"record","display_name":"ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_response_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_response_","display_name":"response_","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceEvent::ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-deserialize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-deserialize","display_name":"deserialize","comment":null,"template_args":null,"params":[{"name":"","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriptionCallbackHelperDeserializeParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SubscriptionCallbackHelperDeserializeParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-getTopic":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-getTopic","display_name":"getTopic","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsSimple":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsSimple","display_name":"IsSimple<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" A simple datatype is one that can be memcpy'd directly in array form, i.e. it's a POD, fixed-size type and"},{"type":"text","text":" sizeof(M) == sum(serializationLength(M:a...))"}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-isZero":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-isZero","display_name":"isZero","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_request_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_request_","display_name":"request_","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<const RequestType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<const ros::ServiceEvent::RequestType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_s-Printer":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_s-Printer","display_name":"Printer<uint8_t>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_s-Printer_stream"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceServerLinkPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServiceServerLinkPtr","display_name":"ServiceServerLinkPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ServiceServerLink>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceServerLink>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_service_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_unadvertised_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_m-unadvertise","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_node_handle_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_c-Impl_m-isValid"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_message":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_message","display_name":"message","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [input] The formatted message that will be output"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-fromBoost":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-fromBoost","display_name":"fromBoost","comment":null,"template_args":null,"params":[{"name":"d","ty":{"kind":"lvaluereference","display_name":"const boost::posix_time::time_duration &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::posix_time::time_duration","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"boost::posix_time::time_duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-boost_n-posix_time_c-time_duration","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_is_const":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_is_const","display_name":"is_const","ty":{"kind":"bool","display_name":"const bool","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_ServiceServerLink":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_ServiceServerLink","display_name":"L_ServiceServerLink","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_actual_cycle_time_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_actual_cycle_time_","display_name":"actual_cycle_time_","ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter","display_name":"Formatter","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_format_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_m-init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_tokens_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Formatter_m-print"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-shutdown","display_name":"shutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Shutdown the advertisement associated with this Publisher"}]},{"type":"paragraph","children":[{"type":"text","text":" This method usually does not need to be explicitly called, as automatic shutdown happens when"},{"type":"text","text":" all copies of this Publisher go out of scope"}]},{"type":"paragraph","children":[{"type":"text","text":" This method overrides the automatic reference counted unadvertise, and does so immediately."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"note","arguments":[],"children":[{"type":"text","text":" Note that if multiple advertisements were made through NodeHandle::advertise(), this will"},{"type":"text","text":" only remove the one associated with this Publisher"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_is_const":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ParameterAdapter_is_const","display_name":"is_const","ty":{"kind":"bool","display_name":"const bool","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_operatorU60U60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_operatorU60U60","display_name":"operator<<","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::serialization::OStream &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::serialization::OStream","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_ok_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_ok_","display_name":"ok_","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_ResponseType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_ResponseType","display_name":"ResponseType","ty":{"kind":"unexposed","display_name":"MRes","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-getTypeInfo":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-getTypeInfo","display_name":"getTypeInfo","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const std::type_info &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::type_info","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"std::type_info","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_api_n-std_c-type_info","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_NonConstTypePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_NonConstTypePtr","display_name":"NonConstTypePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<NonConstType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::SubscriptionCallbackHelperT::NonConstType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-initializeLogLocation":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-initializeLogLocation","display_name":"initializeLogLocation","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Internal"}]}],"template_args":null,"params":[{"name":"loc","ty":{"kind":"pointer","display_name":"ros::console::LogLocation *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::LogLocation","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"name","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"level","ty":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-registerLogLocation":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-registerLogLocation","display_name":"registerLogLocation","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Registers a logging location with the system."}]},{"type":"paragraph","children":[{"type":"text","text":" This is used for the case where a logger's verbosity level changes, and we need to reset the enabled status of"},{"type":"text","text":" all the logging statements."},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"loc","direction":null,"children":[{"type":"text","text":" The location to add"}]}],"template_args":null,"params":[{"name":"loc","ty":{"kind":"pointer","display_name":"ros::console::LogLocation *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::console::LogLocation","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-sleepUntil":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_m-sleepUntil","display_name":"sleepUntil","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Sleep until a specific time has been reached."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" True if the desired sleep time was met, false otherwise."}]}],"template_args":null,"params":[{"name":"end","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTime &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_req_datatype":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_req_datatype","display_name":"req_datatype","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Request message datatype"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","display_name":"CallbackQueue","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_RequestType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_RequestType","display_name":"RequestType","ty":{"kind":"unexposed","display_name":"typename Spec::RequestType","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_oneshot":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_oneshot","display_name":"oneshot","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_init","display_name":"init","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-isSystemTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_m-isSystemTime","display_name":"isSystemTime","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_connect_cb":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_connect_cb","display_name":"connect_cb","ty":{"kind":"typedef","display_name":"ros::SubscriberStatusCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber","display_name":"Subscriber","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_ImplPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-getNumPublishers","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_ImplWPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_U126Subscriber","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_Subscriber","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_m-getTopic"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getRequest":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getRequest","display_name":"getRequest","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns a const-reference to the request"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const ros::ServiceEvent::RequestType &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ServiceEvent::RequestType","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_res_datatype":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_res_datatype","display_name":"res_datatype","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Response message datatype"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-start":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-start","display_name":"start","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Start the timer.  Does nothing if the timer is already started."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NoHighPerformanceTimersException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NoHighPerformanceTimersException","display_name":"NoHighPerformanceTimersException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown if windoze high perf. timestamping is unavailable."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"sa","arguments":[],"children":[{"type":"text","text":" getWallTime"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NoHighPerformanceTimersException_NoHighPerformanceTimersException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_RequestPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_RequestPtr","display_name":"RequestPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<RequestType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceEvent::RequestType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_function":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_function","display_name":"function","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [input] Function the message came from"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-setPeriod":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-setPeriod","display_name":"setPeriod","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Set the period of this timer"}]}],"template_args":null,"params":[{"name":"period","ty":{"kind":"lvaluereference","display_name":"const ros::WallDuration &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"reset","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner","display_name":"AsyncSpinner","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_impl_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-stop","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-start","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_AsyncSpinner","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-canStart"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-getTypeInfo":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-getTypeInfo","display_name":"getTypeInfo","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const std::type_info &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::type_info","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"std::type_info","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_api_n-std_c-type_info","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_create_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_create_","display_name":"create_","ty":{"kind":"typedef","display_name":"ros::MessageEvent::CreateFunction","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::ServiceClient::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream","display_name":"LStream","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Length stream"}]},{"type":"paragraph","children":[{"type":"text","text":" LStream is not what you would normally think of as a stream, but it is used in order to support"},{"type":"text","text":" allinone serializers."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_LStream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_m-advance","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_m-getLength","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_stream_type","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_next","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_count_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSecSigned":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSecSigned","display_name":"normalizeSecNSecSigned","comment":null,"template_args":null,"params":[{"name":"sec","ty":{"kind":"lvaluereference","display_name":"int32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"int32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"nsec","ty":{"kind":"lvaluereference","display_name":"int32_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"int32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_SubscriptionWPtr","display_name":"SubscriptionWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<Subscription>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<ros::Subscription>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_request":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_request","display_name":"request","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<MReq>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<MReq>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Publisher":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Publisher","display_name":"V_Publisher","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operator==":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operator==","display_name":"operator==","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceClient &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceClient","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_RequestPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_RequestPtr","display_name":"RequestPtr","ty":{"kind":"unexposed","display_name":"typename Spec::RequestPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_length":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperDeserializeParams_length","display_name":"length","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper","display_name":"ServiceCallbackHelper","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Abstract base class used by service servers to deal with concrete message types through a common"},{"type":"text","text":" interface.  This is one part of the roscpp API that is "},{"type":"inlinecommand","command":"b","arguments":["not"],"style":"bold"},{"type":"text","text":" fully stable, so overloading this class"},{"type":"text","text":" is not recommended"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper_U126ServiceCallbackHelper","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper_m-call"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ServiceClient":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_ServiceClient","display_name":"ServiceClient","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceClient &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceClient","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-isValid":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-isValid","display_name":"isValid","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not this handle is valid.  For a persistent service, this becomes false when the connection has dropped."},{"type":"text","text":" Non-persistent service handles are always valid."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_period":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_period","display_name":"period","ty":{"kind":"record","display_name":"ros::Duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Duration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceManager":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceManager","display_name":"ServiceManager","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-PollManager":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-PollManager","display_name":"PollManager","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-shutdown","display_name":"shutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Shutdown every handle created through this NodeHandle."}]},{"type":"paragraph","children":[{"type":"text","text":" This method will unadvertise every topic and service advertisement,"},{"type":"text","text":" and unsubscribe every subscription created through this NodeHandle."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner_m-spin":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner_m-spin","display_name":"spin","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Spin on a callback queue (defaults to the global one).  Blocks until roscpp has been shutdown."}]}],"template_args":null,"params":[{"name":"queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueue *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueue","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_name_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_is_shutdown_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_persistent_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_header_values_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_server_link_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_service_md5sum_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_s-Impl_Impl"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU42=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU42=","display_name":"operator*=","comment":null,"template_args":null,"params":[{"name":"scale","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_level":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-FilterParams_level","display_name":"level","ty":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" [input/output] Severity level.  If changed, uses the new level"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const MessageEvent<M> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const MessageEvent<M>","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_WallTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime_WallTime","display_name":"WallTime","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-waitForShutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-waitForShutdown","display_name":"waitForShutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Wait for this node to be shutdown, whether through Ctrl-C, ros::shutdown(), or similar."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_DurationBaseU60TU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_DurationBaseU60TU62","display_name":"DurationBase<T>","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const MessageEvent<M> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const MessageEvent<M>","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_initialized_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-LogLocation_initialized_","display_name":"initialized_","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase","display_name":"TimeBase<T, D>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base class for Time implementations.  Provides storage, common functions and operator overloads."},{"type":"text","text":" This should not need to be used directly."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator-","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-fromSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_sec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator+=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-fromNSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-isZero","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toBoost","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator-=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU60=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator+","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-is_zero","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU62=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_TimeBaseU60T, DU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toNSec","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_nsec"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_datatype":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_datatype","display_name":"datatype","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" The datatype of the message published on this topic (eg. \"std_msgs/String\")"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getConnectionHeader":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getConnectionHeader","display_name":"getConnectionHeader","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns a reference to the connection header."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::M_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"ros::M_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_response":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpecCallParams_response","display_name":"response","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<MRes>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<MRes>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT","display_name":"ServiceCallbackHelperT<Spec>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Concrete generic implementation of ServiceCallbackHelper for any normal service type"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_Callback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResponseType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_callback_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_RequestPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_RequestType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResCreateFunction","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ResponsePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_m-call","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_create_res_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ReqCreateFunction","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_create_req_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_ServiceCallbackHelperTU60SpecU62"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConnectionHeader":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConnectionHeader","display_name":"getConnectionHeader","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Retrieve the connection header"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::M_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"ros::M_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token","display_name":"Token","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token_m-getString","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_s-Token_U126Token"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_next":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-OStream_next","display_name":"next","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Serialize an item to this output stream"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_md5sum":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_md5sum","display_name":"md5sum","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" return MD5Sum"},{"type":"text","text":"<M"},{"type":"text","text":">::value(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator-":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator-","display_name":"operator-","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_connection_header_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_connection_header_","display_name":"connection_header_","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-getGlobalCallbackQueue":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-getGlobalCallbackQueue","display_name":"getGlobalCallbackQueue","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns a pointer to the global default callback queue."}]},{"type":"paragraph","children":[{"type":"text","text":" This is the queue that all callbacks get added to unless a different one is specified, either in the NodeHandle"},{"type":"text","text":" or in the individual NodeHandle::subscribe()/NodeHandle::advertise()/etc. functions."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"ros::CallbackQueue *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueue","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent","display_name":"MessageEvent<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Event type for subscriptions, const ros::MessageEvent"},{"type":"text","text":"<M"},{"type":"text","text":" const>"},{"type":"text","text":"&"},{"type":"text","text":" can be used in your callback instead of const boost::shared_ptr"},{"type":"text","text":"<M"},{"type":"text","text":" const>"},{"type":"text","text":"&"}]},{"type":"paragraph","children":[{"type":"text","text":" Useful if you need to retrieve meta-data about the message, such as the full connection header, or the publisher's node name"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_nonconst_need_copy_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_s_unknown_publisher_string_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_ConstMessagePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_MessageEventU60MU62","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operatorU60","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_CreateFunction","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_Message","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_MessagePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator==","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator!=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getReceiptTime","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConnectionHeader","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_message_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-nonConstWillCopy","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_copyMessageIfNecessary","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-operator=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_message_copy_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_create_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_ConstMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getPublisherName","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConnectionHeaderPtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessageWillCopy","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getMessageFactory","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConstMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_connection_header_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_receipt_time_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_advertise":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_advertise","display_name":"advertise","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Advertise a topic, with most of the available options, including subscriber status callbacks"}]},{"type":"paragraph","children":[{"type":"text","text":" This call connects to the master to publicize that the node will be"},{"type":"text","text":" publishing messages on the given topic.  This method returns a Publisher that allows you to"},{"type":"text","text":" publish a message on this topic."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of advertise allows you to pass functions to be called when new subscribers connect and"},{"type":"text","text":" disconnect.  With bare functions it can be used like so:"},{"type":"text","text":"     "}]},{"type":"verbatimcommand","parts":["     void connectCallback(const ros::SingleSubscriberPublisher& pub)","     {","     // Do something","     }","\n     handle.advertise<std_msgs::Empty>(\"my_topic\", 1, (ros::SubscriberStatusCallback)connectCallback);\n     \\endverbatim\n     *\n     * With class member functions it can be used with boost::bind:\n     \\verbatim\n     void MyClass::connectCallback(const ros::SingleSubscriberPublisher& pub)\n     {\n     // Do something\n     }\n\n     MyClass my_class;\n     ros::Publisher pub = handle.advertise<std_msgs::Empty>(\"my_topic\", 1, \n                                                            boost::bind(&MyClass::connectCallback, my_class, _1));\n     \\endverbatim\n     *\n   *\n   * \\param topic Topic to advertise on\n   *\n   * \\param queue_size Maximum number of outgoing messages to be queued for delivery to subscribers\n   *\n   * \\param connect_cb Function to call when a subscriber connects\n   *\n   * \\param disconnect_cb (optional) Function to call when a subscriber disconnects\n     *\n   * \\param tracked_object (optional) A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\param latch (optional) If true, the last message published on this topic will be saved and sent to new subscribers when they connect\n   * \\return On success, a Publisher that, when it goes out of scope, will automatically release a reference\n   * on this advertisement.  On failure, an empty Publisher which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nros::publisher pub = nodeHandle.advertise<std_msgs::Empty>(\"my_topic\", 1, (ros::SubscriberStatusCallback)callback);\nif (pub)  // Enter if publisher is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template <class M>\n  Publisher advertise(const std::string& topic, uint32_t queue_size,\n                            const SubscriberStatusCallback& connect_cb,\n                            const SubscriberStatusCallback& disconnect_cb = SubscriberStatusCallback(),\n                            const VoidConstPtr& tracked_object = VoidConstPtr(),\n                            bool latch = false)\n  {\n    AdvertiseOptions ops;\n    ops.template init<M>(topic, queue_size, connect_cb, disconnect_cb);\n    ops.tracked_object = tracked_object;\n    ops.latch = latch;\n    return advertise(ops);\n  }\n\n  /**\n   * \\brief Advertise a topic, with full range of AdvertiseOptions\n   *\n   * This call connects to the master to publicize that the node will be\n   * publishing messages on the given topic.  This method returns a Publisher that allows you to\n   * publish a message on this topic.\n   *\n   * This is an advanced version advertise() that exposes all options (through the AdvertiseOptions structure)\n   *\n   * \\param ops Advertise options to use\n   * \\return On success, a Publisher that, when it goes out of scope, will automatically release a reference\n   * on this advertisement.  On failure, an empty Publisher which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nros::AdvertiseOptions ops;\n...\nros::publisher pub = nodeHandle.advertise(ops);\nif (pub)  // Enter if publisher is valid\n{\n...\n}\n\\endverbatim\n   *\n   * \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  Publisher advertise(AdvertiseOptions& ops);\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of subscribe()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * \\brief Subscribe to a topic, version for class member function with bare pointer\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions, and can be used like so:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nFoo foo_object;\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M), T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /// and the const version\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M) const, T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for class member function with bare pointer\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions, and can be used like so:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nFoo foo_object;\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&), T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&) const, T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for class member function with shared_ptr\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions on a shared_ptr:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on.  Since this is a shared pointer, the object will automatically be tracked with a weak_ptr\n   * so that if it is deleted before the Subscriber goes out of scope the callback will no longer be called (and therefore will not crash).\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M), \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M) const, \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for class member function with shared_ptr\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions on a shared_ptr:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on.  Since this is a shared pointer, the object will automatically be tracked with a weak_ptr\n   * so that if it is deleted before the Subscriber goes out of scope the callback will no longer be called (and therefore will not crash).\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&), \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&) const, \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for bare function\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, callback);\n\\endverbatim\n   *\n   * \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Function pointer to call when a message has arrived\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(*fp)(M), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, fp);\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for bare function\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, callback);\n\\endverbatim\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Function pointer to call when a message has arrived\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(*fp)(const boost::shared_ptr<M const>&), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, fp);\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for arbitrary boost::function object\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, callback is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe allows anything bindable to a boost::function object\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param callback Callback to call when a message has arrived\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, const boost::function<void (const boost::shared_ptr<M const>&)>& callback,\n                             const VoidConstPtr& tracked_object = VoidConstPtr(), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, callback);\n    ops.tracked_object = tracked_object;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for arbitrary boost::function object\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, callback is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe allows anything bindable to a boost::function object\n   *\n   * \\param M [template] the message type\n   * \\param C [template] the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&)\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param callback Callback to call when a message has arrived\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class C>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, const boost::function<void (C)>& callback,\n                             const VoidConstPtr& tracked_object = VoidConstPtr(), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<C>(topic, queue_size, callback);\n    ops.tracked_object = tracked_object;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version with full range of SubscribeOptions\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe allows the full range of options, exposed through the SubscribeOptions class\n   *\n   * \\param ops Subscribe options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nSubscribeOptions ops;\n...\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(ops);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  Subscriber subscribe(SubscribeOptions& ops);\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of advertiseService()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * \\brief Advertise a service, version for class member function with bare pointer\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions, and can be used like so:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\n\nFoo foo_object;\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(MReq &, MRes &), T *obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, boost::bind(srv_func, obj, _1, _2));\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for class member function with bare pointer using ros::ServiceEvent as the callback parameter type\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions, and can be used like so:\n\\verbatim\nbool Foo::callback(ros::ServiceEvent<std_srvs::Empty::Request, std_srvs::Empty::Response>& event)\n{\n  return true;\n}\n\nFoo foo_object;\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(ServiceEvent<MReq, MRes>&), T *obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<ServiceEvent<MReq, MRes> >(service, boost::bind(srv_func, obj, _1));\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for class member function with shared_ptr\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions on shared pointers, and can be used like so:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on.  Since this is a shared_ptr, it will automatically be tracked with a weak_ptr,\n   * and if the object is deleted the service callback will stop being called (and therefore will not crash).\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(MReq &, MRes &), const boost::shared_ptr<T>& obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, boost::bind(srv_func, obj.get(), _1, _2));\n    ops.tracked_object = obj;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for class member function with shared_ptr using ros::ServiceEvent as the callback parameter type\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions on shared pointers, and can be used like so:\n\\verbatim\nbool Foo::callback(ros::ServiceEvent<std_srvs::Empty, std_srvs::Empty>& event)\n{\n  return true;\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on.  Since this is a shared_ptr, it will automatically be tracked with a weak_ptr,\n   * and if the object is deleted the service callback will stop being called (and therefore will not crash).\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(ServiceEvent<MReq, MRes>&), const boost::shared_ptr<T>& obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<ServiceEvent<MReq, MRes> >(service, boost::bind(srv_func, obj.get(), _1));\n    ops.tracked_object = obj;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for bare function\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nbool callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\n\nros::ServiceServer service = handle.advertiseService(\"my_service\", callback);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func function pointer to call when a message has arrived\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(*srv_func)(MReq&, MRes&))\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, srv_func);\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for bare function using ros::ServiceEvent as the callback parameter type\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nbool callback(ros::ServiceEvent<std_srvs::Empty, std_srvs::Empty>& event)\n{\n  return true;\n}\n\nros::ServiceServer service = handle.advertiseService(\"my_service\", callback);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func function pointer to call when a message has arrived\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(*srv_func)(ServiceEvent<MReq, MRes>&))\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<ServiceEvent<MReq, MRes> >(service, srv_func);\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for arbitrary boost::function object\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This version of advertiseService allows non-class functions, as well as functor objects and boost::bind (along with anything\n   * else boost::function supports).\n   *\n   * \\param service Service name to advertise on\n   * \\param callback Callback to call when the service is called\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, const boost::function<bool(MReq&, MRes&)>& callback, \n                                 const VoidConstPtr& tracked_object = VoidConstPtr())\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, callback);\n    ops.tracked_object = tracked_object;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for arbitrary boost::function object using ros::ServiceEvent as the callback parameter type\n   *\n   * Note that the template parameter S is the full event type, e.g. ros::ServiceEvent<Req, Res>\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This version of advertiseService allows non-class functions, as well as functor objects and boost::bind (along with anything\n   * else boost::function supports).\n   *\n   * \\param service Service name to advertise on\n   * \\param callback Callback to call when the service is called\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class S>\n  ServiceServer advertiseService(const std::string& service, const boost::function<bool(S&)>& callback, \n                                 const VoidConstPtr& tracked_object = VoidConstPtr())\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<S>(service, callback);\n    ops.tracked_object = tracked_object;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, with full range of AdvertiseServiceOptions\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This version of advertiseService allows the full set of options, exposed through the AdvertiseServiceOptions class\n   *\n   * \\param ops Advertise options\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nAdvertiseServiceOptions ops;\n...\nros::NodeHandle nodeHandle;\nros::ServiceServer service = nodeHandle.advertiseService(ops);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  ServiceServer advertiseService(AdvertiseServiceOptions& ops);\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of serviceClient()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** @brief Create a client for a service, version templated on two message types\n   *\n   * When the last handle reference of a persistent connection is cleared, the connection will automatically close.\n   *\n   * @param service_name The name of the service to connect to\n   * @param persistent Whether this connection should persist.  Persistent services keep the connection to the remote host active\n   *        so that subsequent calls will happen faster.  In general persistent services are discouraged, as they are not as\n   *        robust to node failure as non-persistent services.\n   * @param header_values Key/value pairs you'd like to send along in the connection handshake\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceClient serviceClient(const std::string& service_name, bool persistent = false, \n                              const M_string& header_values = M_string())\n  {\n    ServiceClientOptions ops;\n    ops.template init<MReq, MRes>(service_name, persistent, header_values);\n    return serviceClient(ops);\n  }\n\n  /** @brief Create a client for a service, version templated on service type\n   *\n   * When the last handle reference of a persistent connection is cleared, the connection will automatically close.\n   *\n   * @param service_name The name of the service to connect to\n   * @param persistent Whether this connection should persist.  Persistent services keep the connection to the remote host active\n   *        so that subsequent calls will happen faster.  In general persistent services are discouraged, as they are not as\n   *        robust to node failure as non-persistent services.\n   * @param header_values Key/value pairs you'd like to send along in the connection handshake\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class Service>\n  ServiceClient serviceClient(const std::string& service_name, bool persistent = false, \n                              const M_string& header_values = M_string())\n  {\n    ServiceClientOptions ops;\n    ops.template init<Service>(service_name, persistent, header_values);\n    return serviceClient(ops);\n  }\n\n  /** @brief Create a client for a service, version with full range of ServiceClientOptions\n   *\n   * When the last handle reference of a persistent connection is cleared, the connection will automatically close.\n   *\n   * @param ops The options for this service client\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  ServiceClient serviceClient(ServiceClientOptions& ops);\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of createTimer()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param r The rate at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class Handler, class Obj>\n  Timer createTimer(Rate r, Handler h, Obj o, bool oneshot = false, bool autostart = true) const\n  {\n    return createTimer(r.expectedCycleTime(), h, o, oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  Timer createTimer(Duration period, void(T::*callback)(const TimerEvent&) const, T* obj, \n                    bool oneshot = false, bool autostart = true) const\n  {\n    return createTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  Timer createTimer(Duration period, void(T::*callback)(const TimerEvent&), T* obj, \n                    bool oneshot = false, bool autostart = true) const\n  {\n    return createTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a shared pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on.  Since this is a shared pointer, the object will\n   * automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of\n   * scope the callback will no longer be called (and therefore will not crash).\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  Timer createTimer(Duration period, void(T::*callback)(const TimerEvent&), const boost::shared_ptr<T>& obj, \n                    bool oneshot = false, bool autostart = true) const\n  {\n    TimerOptions ops(period, boost::bind(callback, obj.get(), _1), 0);\n    ops.tracked_object = obj;\n    ops.oneshot = oneshot;\n    ops.autostart = autostart;\n    return createTimer(ops);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * anything that can be bound to a Boost.Function, including a bare function\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The function to call\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  Timer createTimer(Duration period, const TimerCallback& callback, bool oneshot = false,\n                    bool autostart = true) const;\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant allows\n   * the full range of TimerOptions.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param ops The options to use when creating the timer\n   */\n  Timer createTimer(TimerOptions& ops) const;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of createWallTimer()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.\n   * This variant takes a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  WallTimer createWallTimer(WallDuration period, void(T::*callback)(const WallTimerEvent&), T* obj, \n                            bool oneshot = false, bool autostart = true) const\n  {\n    return createWallTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * a class member function, and a shared pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on.  Since this is a shared pointer, the object will\n   * automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of\n   * scope the callback will no longer be called (and therefore will not crash).\n   * \\param oneshot If true, this timer will only fire once\n   */\n  template<class T>\n  WallTimer createWallTimer(WallDuration period, void(T::*callback)(const WallTimerEvent&), \n                            const boost::shared_ptr<T>& obj, \n                            bool oneshot = false, bool autostart = true) const\n  {\n    WallTimerOptions ops(period, boost::bind(callback, obj.get(), _1), 0);\n    ops.tracked_object = obj;\n    ops.oneshot = oneshot;\n    ops.autostart = autostart;\n    return createWallTimer(ops);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * anything that can be bound to a Boost.Function, including a bare function\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The function to call\n   * \\param oneshot If true, this timer will only fire once\n   */\n  WallTimer createWallTimer(WallDuration period, const WallTimerCallback& callback, \n                            bool oneshot = false, bool autostart = true) const;\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant allows\n   * the full range of TimerOptions.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param ops The options to use when creating the timer\n   */\n  WallTimer createWallTimer(WallTimerOptions& ops) const;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of createSteadyTimer()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.\n   * This variant takes a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  SteadyTimer createSteadyTimer(WallDuration period, void(T::*callback)(const SteadyTimerEvent&), T* obj,\n                                bool oneshot = false, bool autostart = true) const\n  {\n    return createSteadyTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * a class member function, and a shared pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on.  Since this is a shared pointer, the object will\n   * automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of\n   * scope the callback will no longer be called (and therefore will not crash).\n   * \\param oneshot If true, this timer will only fire once\n   */\n  template<class T>\n  SteadyTimer createSteadyTimer(WallDuration period, void(T::*callback)(const SteadyTimerEvent&),\n                                const boost::shared_ptr<T>& obj,\n                                bool oneshot = false, bool autostart = true) const\n  {\n    SteadyTimerOptions ops(period, boost::bind(callback, obj.get(), _1), 0);\n    ops.tracked_object = obj;\n    ops.oneshot = oneshot;\n    ops.autostart = autostart;\n    return createSteadyTimer(ops);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * anything that can be bound to a Boost.Function, including a bare function\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The function to call\n   * \\param oneshot If true, this timer will only fire once\n   */\n  SteadyTimer createSteadyTimer(WallDuration period, const SteadyTimerCallback& callback,\n                                bool oneshot = false, bool autostart = true) const;\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant allows\n   * the full range of TimerOptions.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param ops The options to use when creating the timer\n   */\n  SteadyTimer createSteadyTimer(SteadyTimerOptions& ops) const;\n\n  /** \\brief Set an arbitrary XML/RPC value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param v The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const XmlRpc::XmlRpcValue& v) const;\n  /** \\brief Set a string value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param s The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::string& s) const;\n  /** \\brief Set a string value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param s The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const char* s) const;\n  /** \\brief Set a double value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param d The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, double d) const;\n  /** \\brief Set an integer value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param i The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, int i) const;\n  /** \\brief Set a boolean value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param b The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, bool b) const;\n\n  /** \\brief Set a string vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<std::string>& vec) const;\n  /** \\brief Set a double vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<double>& vec) const;\n  /** \\brief Set a float vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<float>& vec) const;\n  /** \\brief Set a int vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<int>& vec) const;\n  /** \\brief Set a bool vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<bool>& vec) const;\n\n  /** \\brief Set a string vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, std::string>& map) const;\n  /** \\brief Set a double vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, double>& map) const;\n  /** \\brief Set a float vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, float>& map) const;\n  /** \\brief Set a int vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, int>& map) const;\n  /** \\brief Set a bool vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, bool>& map) const;\n\n  /** \\brief Get a string value from the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] s Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::string& s) const;\n  /** \\brief Get a double value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] d Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, double& d) const;\n  /** \\brief Get a float value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] f Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, float& f) const;\n  /** \\brief Get an integer value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] i Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, int& i) const;\n  /** \\brief Get a boolean value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] b Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, bool& b) const;\n  /** \\brief Get an arbitrary XML/RPC value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] v Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, XmlRpc::XmlRpcValue& v) const;\n\n  /** \\brief Get a string vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<std::string>& vec) const;\n  /** \\brief Get a double vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<double>& vec) const;\n  /** \\brief Get a float vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<float>& vec) const;\n  /** \\brief Get an int vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<int>& vec) const;\n  /** \\brief Get a boolean vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<bool>& vec) const;\n\n  /** \\brief Get a string map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, std::string>& map) const;\n  /** \\brief Get a double map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, double>& map) const;\n  /** \\brief Get a float map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, float>& map) const;\n  /** \\brief Get an int map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, int>& map) const;\n  /** \\brief Get a boolean map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, bool>& map) const;\n\n  /** \\brief Get a string value from the parameter server, with local caching\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] s Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::string& s) const;\n  /** \\brief Get a double value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] d Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, double& d) const;\n  /** \\brief Get a float value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] f Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, float& f) const;\n  /** \\brief Get an integer value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] i Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, int& i) const;\n  /** \\brief Get a boolean value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] b Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, bool& b) const;\n  /** \\brief Get an arbitrary XML/RPC value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] v Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, XmlRpc::XmlRpcValue& v) const;\n\n  /** \\brief Get a std::string vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<std::string>& vec) const;\n  /** \\brief Get a double vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<double>& vec) const;\n  /** \\brief Get a float vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<float>& vec) const;\n  /** \\brief Get a int vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<int>& vec) const;\n  /** \\brief Get a bool vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<bool>& vec) const;\n\n  /** \\brief Get a string->std::string map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, std::string>& map) const;\n  /** \\brief Get a string->double map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, double>& map) const;\n  /** \\brief Get a string->float map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, float>& map) const;\n  /** \\brief Get a string->int map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, int>& map) const;\n  /** \\brief Get a string->bool map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, bool>& map) const;\n\n  /** \\brief Check whether a parameter exists on the parameter server.\n   *\n   * \\param key The key to check.\n   *\n   * \\return true if the parameter exists, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool hasParam(const std::string& key) const;\n  /** \\brief Search up the tree for a parameter with a given key\n   *\n   * This function parameter server's searchParam feature to search up the tree for\n   * a parameter.  For example, if the parameter server has a parameter [/a/b]\n   * and you're in the namespace [/a/c/d], searching for the parameter \"b\" will\n   * yield [/a/b].  If [/a/c/d/b] existed, that parameter would be returned instead.\n   *\n   * \\param key the parameter to search for\n   * \\param [out] result the found value (if any)\n   *\n   * \\return true if the parameter was found, false otherwise.\n   */\n  bool searchParam(const std::string& key, std::string& result) const;\n  /** \\brief Delete a parameter from the parameter server.\n   *\n   * \\param key The key to delete.\n   *\n   * \\return true if the deletion succeeded, false otherwise.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool deleteParam(const std::string& key) const;\n\n  /** \\brief Get the keys for all the parameters in the parameter server.\n   * \\param keys The keys retrieved.\n   * \\return true if the query succeeded, false otherwise.\n   */\n  bool getParamNames(std::vector<std::string>& keys) const;\n\n  /** \\brief Assign value from parameter server, with default.\n   *\n   * This method tries to retrieve the indicated parameter value from the\n   * parameter server, storing the result in param_val.  If the value\n   * cannot be retrieved from the server, default_val is used instead.\n   *\n   * \\param param_name The key to be searched on the parameter server.\n   * \\param[out] param_val Storage for the retrieved value.\n   * \\param default_val Value to use if the server doesn't contain this\n   * parameter.\n   * \\return true if the parameter was retrieved from the server, false otherwise.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<typename T>\n  bool param(const std::string& param_name, T& param_val, const T& default_val) const\n  {\n    if (hasParam(param_name))\n    {\n      if (getParam(param_name, param_val))\n      {\n        return true;\n      }\n    }\n\n    param_val = default_val;\n    return false;\n  }\n\n  /**\n   * \\brief Return value from parameter server, or default if unavailable.\n   *\n   * This method tries to retrieve the indicated parameter value from the\n   * parameter server. If the parameter cannot be retrieved, \\c default_val\n   * is returned instead.\n   *\n   * \\param param_name The key to be searched on the parameter server.\n   *\n   * \\param default_val Value to return if the server doesn't contain this\n   * parameter.\n   *\n   * \\return The parameter value retrieved from the parameter server, or\n   * \\c default_val if unavailable.\n   *\n   * \\throws InvalidNameException If the parameter key begins with a tilde,\n   * or is an otherwise invalid graph resource name.\n   */\n  template<typename T>\n  T param(const std::string& param_name, const T& default_val) const\n  {\n      T param_val;\n      param(param_name, param_val, default_val);\n      return param_val;\n  }\n\n  /**\n   * \\brief Shutdown every handle created through this NodeHandle.\n   *\n   * This method will unadvertise every topic and service advertisement,\n   * and unsubscribe every subscription created through this NodeHandle.\n   */\n  void shutdown();\n\n  /** \\brief Check whether it's time to exit.\n   *\n   * This method checks to see if both ros::ok() is true and shutdown() has not been called on this NodeHandle, to see whether it's yet time\n   * to exit.  ok() is false once either ros::shutdown() or NodeHandle::shutdown() have been called\n   *\n   * \\return true if we're still OK, false if it's time to exit\n   */\n  bool ok() const;\n\nprivate:\n  struct no_validate { };\n  // this is pretty awful, but required to preserve public interface (and make minimum possible changes)\n  std::string resolveName(const std::string& name, bool remap, no_validate) const;\n\n  void construct(const std::string& ns, bool validate_name);\n  void destruct();\n\n  void initRemappings(const M_string& remappings);\n\n  std::string remapName(const std::string& name) const;\n\n  std::string namespace_;\n  std::string unresolved_namespace_;\n  M_string remappings_;\n  M_string unresolved_remappings_;\n\n  CallbackQueueInterface* callback_queue_;\n\n  NodeHandleBackingCollection* collection_;\n\n  bool ok_;\n};\n\n}\n\n#endif // ROSCPP_NODE_HANDLE_H\n","     handle.advertise<std_msgs::Empty>(\"my_topic\", 1, (ros::SubscriberStatusCallback)connectCallback);"]},{"type":"paragraph","children":[{"type":"text","text":" With class member functions it can be used with boost::bind:"},{"type":"text","text":"     "}]},{"type":"verbatimcommand","parts":["     void MyClass::connectCallback(const ros::SingleSubscriberPublisher& pub)","     {","     // Do something","     }","\n     MyClass my_class;\n     ros::Publisher pub = handle.advertise<std_msgs::Empty>(\"my_topic\", 1, \n                                                            boost::bind(&MyClass::connectCallback, my_class, _1));\n     \\endverbatim\n     *\n   *\n   * \\param topic Topic to advertise on\n   *\n   * \\param queue_size Maximum number of outgoing messages to be queued for delivery to subscribers\n   *\n   * \\param connect_cb Function to call when a subscriber connects\n   *\n   * \\param disconnect_cb (optional) Function to call when a subscriber disconnects\n     *\n   * \\param tracked_object (optional) A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\param latch (optional) If true, the last message published on this topic will be saved and sent to new subscribers when they connect\n   * \\return On success, a Publisher that, when it goes out of scope, will automatically release a reference\n   * on this advertisement.  On failure, an empty Publisher which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nros::publisher pub = nodeHandle.advertise<std_msgs::Empty>(\"my_topic\", 1, (ros::SubscriberStatusCallback)callback);\nif (pub)  // Enter if publisher is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template <class M>\n  Publisher advertise(const std::string& topic, uint32_t queue_size,\n                            const SubscriberStatusCallback& connect_cb,\n                            const SubscriberStatusCallback& disconnect_cb = SubscriberStatusCallback(),\n                            const VoidConstPtr& tracked_object = VoidConstPtr(),\n                            bool latch = false)\n  {\n    AdvertiseOptions ops;\n    ops.template init<M>(topic, queue_size, connect_cb, disconnect_cb);\n    ops.tracked_object = tracked_object;\n    ops.latch = latch;\n    return advertise(ops);\n  }\n\n  /**\n   * \\brief Advertise a topic, with full range of AdvertiseOptions\n   *\n   * This call connects to the master to publicize that the node will be\n   * publishing messages on the given topic.  This method returns a Publisher that allows you to\n   * publish a message on this topic.\n   *\n   * This is an advanced version advertise() that exposes all options (through the AdvertiseOptions structure)\n   *\n   * \\param ops Advertise options to use\n   * \\return On success, a Publisher that, when it goes out of scope, will automatically release a reference\n   * on this advertisement.  On failure, an empty Publisher which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nros::AdvertiseOptions ops;\n...\nros::publisher pub = nodeHandle.advertise(ops);\nif (pub)  // Enter if publisher is valid\n{\n...\n}\n\\endverbatim\n   *\n   * \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  Publisher advertise(AdvertiseOptions& ops);\n\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of subscribe()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * \\brief Subscribe to a topic, version for class member function with bare pointer\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions, and can be used like so:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nFoo foo_object;\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M), T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /// and the const version\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M) const, T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for class member function with bare pointer\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions, and can be used like so:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nFoo foo_object;\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&), T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&) const, T* obj, \n                       const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj, _1));\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for class member function with shared_ptr\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions on a shared_ptr:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on.  Since this is a shared pointer, the object will automatically be tracked with a weak_ptr\n   * so that if it is deleted before the Subscriber goes out of scope the callback will no longer be called (and therefore will not crash).\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M), \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(T::*fp)(M) const, \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for class member function with shared_ptr\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using member functions on a shared_ptr:\n\\verbatim\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Member function pointer to call when a message has arrived\n   * \\param obj Object to call fp on.  Since this is a shared pointer, the object will automatically be tracked with a weak_ptr\n   * so that if it is deleted before the Subscriber goes out of scope the callback will no longer be called (and therefore will not crash).\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nros::NodeHandle nodeHandle;\nvoid Foo::callback(const std_msgs::Empty::ConstPtr& message) {}\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, &Foo::callback, foo_object);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&), \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n  template<class M, class T>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, \n                       void(T::*fp)(const boost::shared_ptr<M const>&) const, \n                       const boost::shared_ptr<T>& obj, const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, boost::bind(fp, obj.get(), _1));\n    ops.tracked_object = obj;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for bare function\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, callback);\n\\endverbatim\n   *\n   * \\param M [template] M here is the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&), \\b not the message type, and should almost always be deduced\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Function pointer to call when a message has arrived\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(*fp)(M), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<M>(topic, queue_size, fp);\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for bare function\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message)\n{\n}\n\nros::Subscriber sub = handle.subscribe(\"my_topic\", 1, callback);\n\\endverbatim\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param fp Function pointer to call when a message has arrived\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, void(*fp)(const boost::shared_ptr<M const>&), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, fp);\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for arbitrary boost::function object\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, callback is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe allows anything bindable to a boost::function object\n   *\n   * \\param M [template] M here is the message type\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param callback Callback to call when a message has arrived\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, const boost::function<void (const boost::shared_ptr<M const>&)>& callback,\n                             const VoidConstPtr& tracked_object = VoidConstPtr(), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template init<M>(topic, queue_size, callback);\n    ops.tracked_object = tracked_object;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version for arbitrary boost::function object\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, callback is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe allows anything bindable to a boost::function object\n   *\n   * \\param M [template] the message type\n   * \\param C [template] the callback parameter type (e.g. const boost::shared_ptr<M const>& or const M&)\n   * \\param topic Topic to subscribe to\n   * \\param queue_size Number of incoming messages to queue up for\n   * processing (messages in excess of this queue capacity will be\n   * discarded).\n   * \\param callback Callback to call when a message has arrived\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\param transport_hints a TransportHints structure which defines various transport-related options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nvoid callback(const std_msgs::Empty::ConstPtr& message){...}\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(\"my_topic\", 1, callback);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  template<class M, class C>\n  Subscriber subscribe(const std::string& topic, uint32_t queue_size, const boost::function<void (C)>& callback,\n                             const VoidConstPtr& tracked_object = VoidConstPtr(), const TransportHints& transport_hints = TransportHints())\n  {\n    SubscribeOptions ops;\n    ops.template initByFullCallbackType<C>(topic, queue_size, callback);\n    ops.tracked_object = tracked_object;\n    ops.transport_hints = transport_hints;\n    return subscribe(ops);\n  }\n\n  /**\n   * \\brief Subscribe to a topic, version with full range of SubscribeOptions\n   *\n   * This method connects to the master to register interest in a given\n   * topic.  The node will automatically be connected with publishers on\n   * this topic.  On each message receipt, fp is invoked and passed a shared pointer\n   * to the message received.  This message should \\b not be changed in place, as it\n   * is shared with any other subscriptions to this topic.\n   *\n   * This version of subscribe allows the full range of options, exposed through the SubscribeOptions class\n   *\n   * \\param ops Subscribe options\n   * \\return On success, a Subscriber that, when all copies of it go out of scope, will unsubscribe from this topic.\n   * On failure, an empty Subscriber which can be checked with:\n\\verbatim\nSubscribeOptions ops;\n...\nros::NodeHandle nodeHandle;\nros::Subscriber sub = nodeHandle.subscribe(ops);\nif (sub)  // Enter if subscriber is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name\n   *  \\throws ConflictingSubscriptionException If this node is already subscribed to the same topic with a different datatype\n   */\n  Subscriber subscribe(SubscribeOptions& ops);\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of advertiseService()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * \\brief Advertise a service, version for class member function with bare pointer\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions, and can be used like so:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\n\nFoo foo_object;\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(MReq &, MRes &), T *obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, boost::bind(srv_func, obj, _1, _2));\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for class member function with bare pointer using ros::ServiceEvent as the callback parameter type\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions, and can be used like so:\n\\verbatim\nbool Foo::callback(ros::ServiceEvent<std_srvs::Empty::Request, std_srvs::Empty::Response>& event)\n{\n  return true;\n}\n\nFoo foo_object;\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   *  \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(ServiceEvent<MReq, MRes>&), T *obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<ServiceEvent<MReq, MRes> >(service, boost::bind(srv_func, obj, _1));\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for class member function with shared_ptr\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions on shared pointers, and can be used like so:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on.  Since this is a shared_ptr, it will automatically be tracked with a weak_ptr,\n   * and if the object is deleted the service callback will stop being called (and therefore will not crash).\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(MReq &, MRes &), const boost::shared_ptr<T>& obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, boost::bind(srv_func, obj.get(), _1, _2));\n    ops.tracked_object = obj;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for class member function with shared_ptr using ros::ServiceEvent as the callback parameter type\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using member functions on shared pointers, and can be used like so:\n\\verbatim\nbool Foo::callback(ros::ServiceEvent<std_srvs::Empty, std_srvs::Empty>& event)\n{\n  return true;\n}\n\nboost::shared_ptr<Foo> foo_object(boost::make_shared<Foo>());\nros::ServiceServer service = handle.advertiseService(\"my_service\", &Foo::callback, foo_object);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func Member function pointer to call when a message has arrived\n   * \\param obj Object to call srv_func on.  Since this is a shared_ptr, it will automatically be tracked with a weak_ptr,\n   * and if the object is deleted the service callback will stop being called (and therefore will not crash).\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", &Foo::callback, &foo_object);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class T, class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(T::*srv_func)(ServiceEvent<MReq, MRes>&), const boost::shared_ptr<T>& obj)\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<ServiceEvent<MReq, MRes> >(service, boost::bind(srv_func, obj.get(), _1));\n    ops.tracked_object = obj;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for bare function\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nbool callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\n\nros::ServiceServer service = handle.advertiseService(\"my_service\", callback);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func function pointer to call when a message has arrived\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(*srv_func)(MReq&, MRes&))\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, srv_func);\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for bare function using ros::ServiceEvent as the callback parameter type\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This is a convenience function for using bare functions, and can be used like so:\n\\verbatim\nbool callback(ros::ServiceEvent<std_srvs::Empty, std_srvs::Empty>& event)\n{\n  return true;\n}\n\nros::ServiceServer service = handle.advertiseService(\"my_service\", callback);\n\\endverbatim\n   *\n   * \\param service Service name to advertise on\n   * \\param srv_func function pointer to call when a message has arrived\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, bool(*srv_func)(ServiceEvent<MReq, MRes>&))\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<ServiceEvent<MReq, MRes> >(service, srv_func);\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for arbitrary boost::function object\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This version of advertiseService allows non-class functions, as well as functor objects and boost::bind (along with anything\n   * else boost::function supports).\n   *\n   * \\param service Service name to advertise on\n   * \\param callback Callback to call when the service is called\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceServer advertiseService(const std::string& service, const boost::function<bool(MReq&, MRes&)>& callback, \n                                 const VoidConstPtr& tracked_object = VoidConstPtr())\n  {\n    AdvertiseServiceOptions ops;\n    ops.template init<MReq, MRes>(service, callback);\n    ops.tracked_object = tracked_object;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, version for arbitrary boost::function object using ros::ServiceEvent as the callback parameter type\n   *\n   * Note that the template parameter S is the full event type, e.g. ros::ServiceEvent<Req, Res>\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This version of advertiseService allows non-class functions, as well as functor objects and boost::bind (along with anything\n   * else boost::function supports).\n   *\n   * \\param service Service name to advertise on\n   * \\param callback Callback to call when the service is called\n   * \\param tracked_object A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,\n   * and if the reference count goes to 0 the subscriber callbacks will not get called.\n   * Note that setting this will cause a new reference to be added to the object before the\n   * callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore\n   * thread) that the callback is invoked from.\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nbool Foo::callback(std_srvs::Empty& request, std_srvs::Empty& response)\n{\n  return true;\n}\nros::NodeHandle nodeHandle;\nFoo foo_object;\nros::ServiceServer service = nodeHandle.advertiseService(\"my_service\", callback);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class S>\n  ServiceServer advertiseService(const std::string& service, const boost::function<bool(S&)>& callback, \n                                 const VoidConstPtr& tracked_object = VoidConstPtr())\n  {\n    AdvertiseServiceOptions ops;\n    ops.template initBySpecType<S>(service, callback);\n    ops.tracked_object = tracked_object;\n    return advertiseService(ops);\n  }\n\n  /**\n   * \\brief Advertise a service, with full range of AdvertiseServiceOptions\n   *\n   * This call connects to the master to publicize that the node will be\n   * offering an RPC service with the given name.\n   *\n   * This version of advertiseService allows the full set of options, exposed through the AdvertiseServiceOptions class\n   *\n   * \\param ops Advertise options\n   * \\return On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service.\n   * On failure, an empty ServiceServer which can be checked with:\n\\verbatim\nAdvertiseServiceOptions ops;\n...\nros::NodeHandle nodeHandle;\nros::ServiceServer service = nodeHandle.advertiseService(ops);\nif (service)  // Enter if advertised service is valid\n{\n...\n}\n\\endverbatim\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  ServiceServer advertiseService(AdvertiseServiceOptions& ops);\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of serviceClient()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** @brief Create a client for a service, version templated on two message types\n   *\n   * When the last handle reference of a persistent connection is cleared, the connection will automatically close.\n   *\n   * @param service_name The name of the service to connect to\n   * @param persistent Whether this connection should persist.  Persistent services keep the connection to the remote host active\n   *        so that subsequent calls will happen faster.  In general persistent services are discouraged, as they are not as\n   *        robust to node failure as non-persistent services.\n   * @param header_values Key/value pairs you'd like to send along in the connection handshake\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class MReq, class MRes>\n  ServiceClient serviceClient(const std::string& service_name, bool persistent = false, \n                              const M_string& header_values = M_string())\n  {\n    ServiceClientOptions ops;\n    ops.template init<MReq, MRes>(service_name, persistent, header_values);\n    return serviceClient(ops);\n  }\n\n  /** @brief Create a client for a service, version templated on service type\n   *\n   * When the last handle reference of a persistent connection is cleared, the connection will automatically close.\n   *\n   * @param service_name The name of the service to connect to\n   * @param persistent Whether this connection should persist.  Persistent services keep the connection to the remote host active\n   *        so that subsequent calls will happen faster.  In general persistent services are discouraged, as they are not as\n   *        robust to node failure as non-persistent services.\n   * @param header_values Key/value pairs you'd like to send along in the connection handshake\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<class Service>\n  ServiceClient serviceClient(const std::string& service_name, bool persistent = false, \n                              const M_string& header_values = M_string())\n  {\n    ServiceClientOptions ops;\n    ops.template init<Service>(service_name, persistent, header_values);\n    return serviceClient(ops);\n  }\n\n  /** @brief Create a client for a service, version with full range of ServiceClientOptions\n   *\n   * When the last handle reference of a persistent connection is cleared, the connection will automatically close.\n   *\n   * @param ops The options for this service client\n   * \\throws InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  ServiceClient serviceClient(ServiceClientOptions& ops);\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of createTimer()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param r The rate at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class Handler, class Obj>\n  Timer createTimer(Rate r, Handler h, Obj o, bool oneshot = false, bool autostart = true) const\n  {\n    return createTimer(r.expectedCycleTime(), h, o, oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  Timer createTimer(Duration period, void(T::*callback)(const TimerEvent&) const, T* obj, \n                    bool oneshot = false, bool autostart = true) const\n  {\n    return createTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  Timer createTimer(Duration period, void(T::*callback)(const TimerEvent&), T* obj, \n                    bool oneshot = false, bool autostart = true) const\n  {\n    return createTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * a class member function, and a shared pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on.  Since this is a shared pointer, the object will\n   * automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of\n   * scope the callback will no longer be called (and therefore will not crash).\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  Timer createTimer(Duration period, void(T::*callback)(const TimerEvent&), const boost::shared_ptr<T>& obj, \n                    bool oneshot = false, bool autostart = true) const\n  {\n    TimerOptions ops(period, boost::bind(callback, obj.get(), _1), 0);\n    ops.tracked_object = obj;\n    ops.oneshot = oneshot;\n    ops.autostart = autostart;\n    return createTimer(ops);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant takes\n   * anything that can be bound to a Boost.Function, including a bare function\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The function to call\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  Timer createTimer(Duration period, const TimerCallback& callback, bool oneshot = false,\n                    bool autostart = true) const;\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate.  This variant allows\n   * the full range of TimerOptions.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param ops The options to use when creating the timer\n   */\n  Timer createTimer(TimerOptions& ops) const;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of createWallTimer()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.\n   * This variant takes a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  WallTimer createWallTimer(WallDuration period, void(T::*callback)(const WallTimerEvent&), T* obj, \n                            bool oneshot = false, bool autostart = true) const\n  {\n    return createWallTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * a class member function, and a shared pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on.  Since this is a shared pointer, the object will\n   * automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of\n   * scope the callback will no longer be called (and therefore will not crash).\n   * \\param oneshot If true, this timer will only fire once\n   */\n  template<class T>\n  WallTimer createWallTimer(WallDuration period, void(T::*callback)(const WallTimerEvent&), \n                            const boost::shared_ptr<T>& obj, \n                            bool oneshot = false, bool autostart = true) const\n  {\n    WallTimerOptions ops(period, boost::bind(callback, obj.get(), _1), 0);\n    ops.tracked_object = obj;\n    ops.oneshot = oneshot;\n    ops.autostart = autostart;\n    return createWallTimer(ops);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * anything that can be bound to a Boost.Function, including a bare function\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The function to call\n   * \\param oneshot If true, this timer will only fire once\n   */\n  WallTimer createWallTimer(WallDuration period, const WallTimerCallback& callback, \n                            bool oneshot = false, bool autostart = true) const;\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant allows\n   * the full range of TimerOptions.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param ops The options to use when creating the timer\n   */\n  WallTimer createWallTimer(WallTimerOptions& ops) const;\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Versions of createSteadyTimer()\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.\n   * This variant takes a class member function, and a bare pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on\n   * \\param oneshot If true, this timer will only fire once\n   * \\param autostart If true (default), return timer that is already started\n   */\n  template<class T>\n  SteadyTimer createSteadyTimer(WallDuration period, void(T::*callback)(const SteadyTimerEvent&), T* obj,\n                                bool oneshot = false, bool autostart = true) const\n  {\n    return createSteadyTimer(period, boost::bind(callback, obj, _1), oneshot, autostart);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * a class member function, and a shared pointer to the object to call the method on.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The method to call\n   * \\param obj The object to call the method on.  Since this is a shared pointer, the object will\n   * automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of\n   * scope the callback will no longer be called (and therefore will not crash).\n   * \\param oneshot If true, this timer will only fire once\n   */\n  template<class T>\n  SteadyTimer createSteadyTimer(WallDuration period, void(T::*callback)(const SteadyTimerEvent&),\n                                const boost::shared_ptr<T>& obj,\n                                bool oneshot = false, bool autostart = true) const\n  {\n    SteadyTimerOptions ops(period, boost::bind(callback, obj.get(), _1), 0);\n    ops.tracked_object = obj;\n    ops.oneshot = oneshot;\n    ops.autostart = autostart;\n    return createSteadyTimer(ops);\n  }\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant takes\n   * anything that can be bound to a Boost.Function, including a bare function\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param period The period at which to call the callback\n   * \\param callback The function to call\n   * \\param oneshot If true, this timer will only fire once\n   */\n  SteadyTimer createSteadyTimer(WallDuration period, const SteadyTimerCallback& callback,\n                                bool oneshot = false, bool autostart = true) const;\n\n  /**\n   * \\brief Create a timer which will call a callback at the specified rate, using wall time to determine\n   * when to call the callback instead of ROS time.  This variant allows\n   * the full range of TimerOptions.\n   *\n   * When the Timer (and all copies of it) returned goes out of scope, the timer will automatically\n   * be stopped, and the callback will no longer be called.\n   *\n   * \\param ops The options to use when creating the timer\n   */\n  SteadyTimer createSteadyTimer(SteadyTimerOptions& ops) const;\n\n  /** \\brief Set an arbitrary XML/RPC value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param v The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const XmlRpc::XmlRpcValue& v) const;\n  /** \\brief Set a string value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param s The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::string& s) const;\n  /** \\brief Set a string value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param s The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const char* s) const;\n  /** \\brief Set a double value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param d The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, double d) const;\n  /** \\brief Set an integer value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param i The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, int i) const;\n  /** \\brief Set a boolean value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param b The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, bool b) const;\n\n  /** \\brief Set a string vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<std::string>& vec) const;\n  /** \\brief Set a double vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<double>& vec) const;\n  /** \\brief Set a float vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<float>& vec) const;\n  /** \\brief Set a int vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<int>& vec) const;\n  /** \\brief Set a bool vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param vec The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::vector<bool>& vec) const;\n\n  /** \\brief Set a string vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, std::string>& map) const;\n  /** \\brief Set a double vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, double>& map) const;\n  /** \\brief Set a float vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, float>& map) const;\n  /** \\brief Set a int vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, int>& map) const;\n  /** \\brief Set a bool vector value on the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param map The value to be inserted.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  void setParam(const std::string& key, const std::map<std::string, bool>& map) const;\n\n  /** \\brief Get a string value from the parameter server.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] s Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::string& s) const;\n  /** \\brief Get a double value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] d Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, double& d) const;\n  /** \\brief Get a float value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] f Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, float& f) const;\n  /** \\brief Get an integer value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] i Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, int& i) const;\n  /** \\brief Get a boolean value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] b Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, bool& b) const;\n  /** \\brief Get an arbitrary XML/RPC value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] v Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, XmlRpc::XmlRpcValue& v) const;\n\n  /** \\brief Get a string vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<std::string>& vec) const;\n  /** \\brief Get a double vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<double>& vec) const;\n  /** \\brief Get a float vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<float>& vec) const;\n  /** \\brief Get an int vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<int>& vec) const;\n  /** \\brief Get a boolean vector value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::vector<bool>& vec) const;\n\n  /** \\brief Get a string map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, std::string>& map) const;\n  /** \\brief Get a double map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, double>& map) const;\n  /** \\brief Get a float map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, float>& map) const;\n  /** \\brief Get an int map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, int>& map) const;\n  /** \\brief Get a boolean map value from the parameter server.\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParam(const std::string& key, std::map<std::string, bool>& map) const;\n\n  /** \\brief Get a string value from the parameter server, with local caching\n   *\n   * If you want to provide a default value in case the key does not exist use param().\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] s Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::string& s) const;\n  /** \\brief Get a double value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] d Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, double& d) const;\n  /** \\brief Get a float value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] f Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, float& f) const;\n  /** \\brief Get an integer value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] i Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, int& i) const;\n  /** \\brief Get a boolean value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] b Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, bool& b) const;\n  /** \\brief Get an arbitrary XML/RPC value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] v Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, XmlRpc::XmlRpcValue& v) const;\n\n  /** \\brief Get a std::string vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<std::string>& vec) const;\n  /** \\brief Get a double vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<double>& vec) const;\n  /** \\brief Get a float vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<float>& vec) const;\n  /** \\brief Get a int vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<int>& vec) const;\n  /** \\brief Get a bool vector value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] vec Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::vector<bool>& vec) const;\n\n  /** \\brief Get a string->std::string map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, std::string>& map) const;\n  /** \\brief Get a string->double map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, double>& map) const;\n  /** \\brief Get a string->float map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, float>& map) const;\n  /** \\brief Get a string->int map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, int>& map) const;\n  /** \\brief Get a string->bool map value from the parameter server, with local caching\n   *\n   * This method will cache parameters locally, and subscribe for updates from\n   * the parameter server.  Once the parameter is retrieved for the first time\n   * no subsequent getCached() calls with the same key will query the master --\n   * they will instead look up in the local cache.\n   *\n   * \\param key The key to be used in the parameter server's dictionary\n   * \\param[out] map Storage for the retrieved value.\n   *\n   * \\return true if the parameter value was retrieved, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool getParamCached(const std::string& key, std::map<std::string, bool>& map) const;\n\n  /** \\brief Check whether a parameter exists on the parameter server.\n   *\n   * \\param key The key to check.\n   *\n   * \\return true if the parameter exists, false otherwise\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool hasParam(const std::string& key) const;\n  /** \\brief Search up the tree for a parameter with a given key\n   *\n   * This function parameter server's searchParam feature to search up the tree for\n   * a parameter.  For example, if the parameter server has a parameter [/a/b]\n   * and you're in the namespace [/a/c/d], searching for the parameter \"b\" will\n   * yield [/a/b].  If [/a/c/d/b] existed, that parameter would be returned instead.\n   *\n   * \\param key the parameter to search for\n   * \\param [out] result the found value (if any)\n   *\n   * \\return true if the parameter was found, false otherwise.\n   */\n  bool searchParam(const std::string& key, std::string& result) const;\n  /** \\brief Delete a parameter from the parameter server.\n   *\n   * \\param key The key to delete.\n   *\n   * \\return true if the deletion succeeded, false otherwise.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  bool deleteParam(const std::string& key) const;\n\n  /** \\brief Get the keys for all the parameters in the parameter server.\n   * \\param keys The keys retrieved.\n   * \\return true if the query succeeded, false otherwise.\n   */\n  bool getParamNames(std::vector<std::string>& keys) const;\n\n  /** \\brief Assign value from parameter server, with default.\n   *\n   * This method tries to retrieve the indicated parameter value from the\n   * parameter server, storing the result in param_val.  If the value\n   * cannot be retrieved from the server, default_val is used instead.\n   *\n   * \\param param_name The key to be searched on the parameter server.\n   * \\param[out] param_val Storage for the retrieved value.\n   * \\param default_val Value to use if the server doesn't contain this\n   * parameter.\n   * \\return true if the parameter was retrieved from the server, false otherwise.\n   * \\throws InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name\n   */\n  template<typename T>\n  bool param(const std::string& param_name, T& param_val, const T& default_val) const\n  {\n    if (hasParam(param_name))\n    {\n      if (getParam(param_name, param_val))\n      {\n        return true;\n      }\n    }\n\n    param_val = default_val;\n    return false;\n  }\n\n  /**\n   * \\brief Return value from parameter server, or default if unavailable.\n   *\n   * This method tries to retrieve the indicated parameter value from the\n   * parameter server. If the parameter cannot be retrieved, \\c default_val\n   * is returned instead.\n   *\n   * \\param param_name The key to be searched on the parameter server.\n   *\n   * \\param default_val Value to return if the server doesn't contain this\n   * parameter.\n   *\n   * \\return The parameter value retrieved from the parameter server, or\n   * \\c default_val if unavailable.\n   *\n   * \\throws InvalidNameException If the parameter key begins with a tilde,\n   * or is an otherwise invalid graph resource name.\n   */\n  template<typename T>\n  T param(const std::string& param_name, const T& default_val) const\n  {\n      T param_val;\n      param(param_name, param_val, default_val);\n      return param_val;\n  }\n\n  /**\n   * \\brief Shutdown every handle created through this NodeHandle.\n   *\n   * This method will unadvertise every topic and service advertisement,\n   * and unsubscribe every subscription created through this NodeHandle.\n   */\n  void shutdown();\n\n  /** \\brief Check whether it's time to exit.\n   *\n   * This method checks to see if both ros::ok() is true and shutdown() has not been called on this NodeHandle, to see whether it's yet time\n   * to exit.  ok() is false once either ros::shutdown() or NodeHandle::shutdown() have been called\n   *\n   * \\return true if we're still OK, false if it's time to exit\n   */\n  bool ok() const;\n\nprivate:\n  struct no_validate { };\n  // this is pretty awful, but required to preserve public interface (and make minimum possible changes)\n  std::string resolveName(const std::string& name, bool remap, no_validate) const;\n\n  void construct(const std::string& ns, bool validate_name);\n  void destruct();\n\n  void initRemappings(const M_string& remappings);\n\n  std::string remapName(const std::string& name) const;\n\n  std::string namespace_;\n  std::string unresolved_namespace_;\n  M_string remappings_;\n  M_string unresolved_remappings_;\n\n  CallbackQueueInterface* callback_queue_;\n\n  NodeHandleBackingCollection* collection_;\n\n  bool ok_;\n};\n\n}\n\n#endif // ROSCPP_NODE_HANDLE_H\n","     MyClass my_class;","     ros::Publisher pub = handle.advertise<std_msgs::Empty>(\"my_topic\", 1, ","                                                            boost::bind(&MyClass::connectCallback, my_class, _1));"]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"topic","direction":null,"children":[{"type":"text","text":" Topic to advertise on"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"queue_size","direction":null,"children":[{"type":"text","text":" Maximum number of outgoing messages to be queued for delivery to subscribers"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"connect_cb","direction":null,"children":[{"type":"text","text":" Function to call when a subscriber connects"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"disconnect_cb","direction":null,"children":[{"type":"text","text":" (optional) Function to call when a subscriber disconnects"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":4,"parameter":"tracked_object","direction":null,"children":[{"type":"text","text":" (optional) A shared pointer to an object to track for these callbacks.  If set, the a weak_ptr will be created to this object,"},{"type":"text","text":" and if the reference count goes to 0 the subscriber callbacks will not get called."},{"type":"text","text":" Note that setting this will cause a new reference to be added to the object before the"},{"type":"text","text":" callback, and for it to go out of scope (and potentially be deleted) in the code path (and therefore"},{"type":"text","text":" thread) that the callback is invoked from."},{"type":"text","text":" "}]},{"type":"paramcommand","index":5,"parameter":"latch","direction":null,"children":[{"type":"text","text":" (optional) If true, the last message published on this topic will be saved and sent to new subscribers when they connect"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a Publisher that, when it goes out of scope, will automatically release a reference"},{"type":"text","text":" on this advertisement.  On failure, an empty Publisher which can be checked with:"}]},{"type":"verbatimcommand","parts":["ros::NodeHandle nodeHandle;","ros::publisher pub = nodeHandle.advertise<std_msgs::Empty>(\"my_topic\", 1, (ros::SubscriberStatusCallback)callback);","if (pub)  // Enter if publisher is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the topic name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Publisher","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ResponsePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_ResponsePtr","display_name":"ResponsePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceEvent::ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getPublisherName":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getPublisherName","display_name":"getPublisherName","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the name of the node which published this message"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializeServiceResponse":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_serializeServiceResponse","display_name":"serializeServiceResponse","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Serialize a service response"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_write":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_write","display_name":"write","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_U126ServiceClient":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_U126ServiceClient","display_name":"~ServiceClient","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_unresolved_namespace_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_unresolved_namespace_","display_name":"unresolved_namespace_","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_tracked_object":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_tracked_object","display_name":"tracked_object","ty":{"kind":"typedef","display_name":"ros::VoidConstPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::Subscriber::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-deserializeFailed":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-deserializeFailed","display_name":"deserializeFailed","comment":null,"template_args":null,"params":[{"name":"e","ty":{"kind":"lvaluereference","display_name":"const std::exception &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::exception","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"std::exception","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_api_n-std_c-exception","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_helper":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_helper","display_name":"helper","ty":{"kind":"typedef","display_name":"ros::SubscriptionCallbackHelperPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-shutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-shutdown","display_name":"shutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Shutdown the connection associated with this ServiceClient"}]},{"type":"paragraph","children":[{"type":"text","text":" This method usually does not need to be explicitly called, as automatic shutdown happens when"},{"type":"text","text":" all copies of this ServiceClient go out of scope"}]},{"type":"paragraph","children":[{"type":"text","text":" This method overrides the automatic reference counted shutdown, and does so immediately."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_init","display_name":"init","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Templated initialization, templated on message type.  Only supports \"const boost::shared_ptr"},{"type":"text","text":"<M"},{"type":"text","text":" const>"},{"type":"text","text":"&"},{"type":"text","text":"\" callback types"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"_topic","direction":null,"children":[{"type":"text","text":" Topic to subscribe on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"_queue_size","direction":null,"children":[{"type":"text","text":" Number of incoming messages to queue up for"},{"type":"text","text":"        processing (messages in excess of this queue capacity will be"},{"type":"text","text":"        discarded)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"_callback","direction":null,"children":[{"type":"text","text":" Callback to call when a message arrives on this topic"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-init","display_name":"init","comment":null,"template_args":null,"params":[{"name":"remapping_args","ty":{"kind":"lvaluereference","display_name":"const ros::VP_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::VP_string","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"name","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"options","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","display_name":"NodeHandle","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" roscpp's interface for creating subscribers, publishers, etc."}]},{"type":"paragraph","children":[{"type":"text","text":" This class is used for writing nodes.  It provides a RAII interface"},{"type":"text","text":" to this process' node, in that when the first NodeHandle is"},{"type":"text","text":" created, it instantiates everything necessary for this node, and"},{"type":"text","text":" when the last NodeHandle goes out of scope it shuts down the node."}]},{"type":"paragraph","children":[{"type":"text","text":" NodeHandle uses reference counting internally, and copying a"},{"type":"text","text":" NodeHandle is very lightweight."}]},{"type":"paragraph","children":[{"type":"text","text":" You must call one of the ros::init functions prior to instantiating"},{"type":"text","text":" this class."}]},{"type":"paragraph","children":[{"type":"text","text":" The most widely used methods are:"},{"type":"text","text":"   - Setup:"},{"type":"text","text":"    - ros::init()"},{"type":"text","text":"   - Publish / subscribe messaging:"},{"type":"text","text":"    - advertise()"},{"type":"text","text":"    - subscribe()"},{"type":"text","text":"   - RPC services:"},{"type":"text","text":"    - advertiseService()"},{"type":"text","text":"    - serviceClient()"},{"type":"text","text":"    - ros::service::call()"},{"type":"text","text":"   - Parameters:"},{"type":"text","text":"    - getParam()"},{"type":"text","text":"    - setParam()"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getNamespace","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-hasParam","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_unresolved_namespace_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createWallTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getUnresolvedNamespace","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_s-no_validate","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-deleteParam","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-advertise","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_param","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-ok","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-initRemappings","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_advertise","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-remapName","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-advertiseService","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-shutdown","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_callback_queue_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_serviceClient","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_collection_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_ok_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_subscribe","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-setParam","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_U126NodeHandle","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_NodeHandle","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-construct","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParamNames","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getCallbackQueue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-operator=","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_unresolved_remappings_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-setCallbackQueue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-resolveName","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-serviceClient","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParam","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_namespace_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-destruct","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-searchParam","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParamCached","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-subscribe","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createWallTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_remappings_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_advertiseService","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-createSteadyTimer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createSteadyTimer"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-PublisherLink":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-PublisherLink","display_name":"PublisherLink","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_namespace_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_namespace_","display_name":"namespace_","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_profile":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_profile","display_name":"profile","ty":{"kind":"elaborated","display_name":"struct (anonymous struct at /opt/ros/kinetic/include/ros/forwards.h:157:3)","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::WallTimerEvent::(anonymous struct at /opt/ros/kinetic/include/ros/forwards.h:157:3)","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_s-","const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-searchParam":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-searchParam","display_name":"searchParam","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Search up the tree for a parameter with a given key"}]},{"type":"paragraph","children":[{"type":"text","text":" This function parameter server's searchParam feature to search up the tree for"},{"type":"text","text":" a parameter.  For example, if the parameter server has a parameter [/a/b]"},{"type":"text","text":" and you're in the namespace [/a/c/d], searching for the parameter \"b\" will"},{"type":"text","text":" yield [/a/b].  If [/a/c/d/b] existed, that parameter would be returned instead."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" the parameter to search for"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"result","direction":"out","children":[{"type":"text","text":" the found value (if any)"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the parameter was found, false otherwise."}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"result","ty":{"kind":"lvaluereference","display_name":"std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operatorU62","display_name":"operator>","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-fromNSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-fromNSec","display_name":"fromNSec","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"typedef","display_name":"uint64_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_ConstTypePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_ConstTypePtr","display_name":"ConstTypePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ConstType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::SubscriptionCallbackHelperT::ConstType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getTransports":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-getTransports","display_name":"getTransports","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns a vector of transports, ordered by preference"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const ros::V_string &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::V_string","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Subscription":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Subscription","display_name":"V_Subscription","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-advance":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-advance","display_name":"advance","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Advances the stream, checking bounds, and returns a pointer to the position before it"},{"type":"text","text":" was advanced."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" StreamOverrunException if len would take this stream past the end of its buffer"}]}],"template_args":null,"params":[{"name":"len","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-DataType":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-DataType","display_name":"DataType< ::dynamic_reconfigure::ReconfigureResponse>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_s-DataType_m-value"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_f-print":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_n-backend_f-print","display_name":"print","comment":null,"template_args":null,"params":[{"name":"logger_handle","ty":{"kind":"pointer","display_name":"void *","name":null,"const_qualified":false,"pointee":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"level","ty":{"kind":"elaborated","display_name":"::ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"ros::console::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},{"name":"str","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"file","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"function","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"line","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator+=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator+=","display_name":"operator+=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const D &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const D","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_param":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_param","display_name":"param","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Return value from parameter server, or default if unavailable."}]},{"type":"paragraph","children":[{"type":"text","text":" This method tries to retrieve the indicated parameter value from the"},{"type":"text","text":" parameter server. If the parameter cannot be retrieved, "},{"type":"inlinecommand","command":"c","arguments":["default_val"],"style":"monospace"},{"type":"text","text":" is returned instead."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"param_name","direction":null,"children":[{"type":"text","text":" The key to be searched on the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"default_val","direction":null,"children":[{"type":"text","text":" Value to return if the server doesn't contain this"},{"type":"text","text":" parameter."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" The parameter value retrieved from the parameter server, or"},{"type":"text","text":" "},{"type":"inlinecommand","command":"c","arguments":["default_val"],"style":"monospace"},{"type":"text","text":" if unavailable."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the parameter key begins with a tilde,"},{"type":"text","text":" or is an otherwise invalid graph resource name."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"unexposed","display_name":"T","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_data_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_data_","display_name":"data_","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_period":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_period","display_name":"period","ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-maxDatagramSize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints_m-maxDatagramSize","display_name":"maxDatagramSize","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" If a UDP transport is used, specifies the maximum datagram size."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"size","direction":null,"children":[{"type":"text","text":" The size, in bytes"}]}],"template_args":null,"params":[{"name":"size","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"lvaluereference","display_name":"ros::TransportHints &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::TransportHints","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportHints","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_Subscription":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_Subscription","display_name":"S_Subscription","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-XMLRPCManager":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-XMLRPCManager","display_name":"XMLRPCManager","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceClient &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceClient","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_count_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-LStream_count_","display_name":"count_","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_create_res_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_create_res_","display_name":"create_res_","ty":{"kind":"typedef","display_name":"ros::ServiceCallbackHelperT::ResCreateFunction","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits","display_name":"message_traits","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_timeStamp","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_hasHeader","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-IsFixedSize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsMessage","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-DataType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Definition","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_isSimple","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-IsSimple","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-HasHeader","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_md5sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-FalseType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_frameId","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-MD5Sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-Header","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsFixedSize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-IsSimple","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_definition","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_isFixedSize","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-TimeStamp","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-FrameId"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_oneshot":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_oneshot","display_name":"oneshot","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-hasParam":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-hasParam","display_name":"hasParam","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Check whether a parameter exists on the parameter server."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"key","direction":null,"children":[{"type":"text","text":" The key to check."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if the parameter exists, false otherwise"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the parameter key begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[{"name":"key","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-ArraySerializer":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-ArraySerializer","display_name":"ArraySerializer<T, N, Enabled>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Array serializer, default implementation does nothing"}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_last_real":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_last_real","display_name":"last_real","ty":{"kind":"record","display_name":"ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-requestShutdown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-requestShutdown","display_name":"requestShutdown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Request that the node shut itself down from within a ROS thread"}]},{"type":"paragraph","children":[{"type":"text","text":" This method signals a ROS thread to call shutdown()."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-DataType_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_tc-DataType_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParamNames":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getParamNames","display_name":"getParamNames","comment":null,"template_args":null,"params":[{"name":"keys","ty":{"kind":"lvaluereference","display_name":"int &","name":null,"const_qualified":false,"pointee":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_service":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_service","display_name":"service","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Service name"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-TimeStamp":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-TimeStamp","display_name":"TimeStamp<M, Enable>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" TimeStamp trait.  In the default implementation pointer()"},{"type":"text","text":" returns "},{"type":"text","text":"&m"},{"type":"text","text":".header.stamp if HasHeader"},{"type":"text","text":"<M"},{"type":"text","text":">::value is true, otherwise returns NULL.  value()"},{"type":"text","text":" does not exist, and causes a compile error"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-TimeStamp_m-pointer"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-waitForValid":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-waitForValid","display_name":"waitForValid","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Wait for time to become valid, with timeout"}]}],"template_args":null,"params":[{"name":"timeout","ty":{"kind":"lvaluereference","display_name":"const ros::WallDuration &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const ros::WallDuration","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","display_name":"CallbackQueueInterface","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportTCP":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TransportTCP","display_name":"TransportTCP","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_callback_queue":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_callback_queue","display_name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Queue to add callbacks to.  If NULL, the global callback queue will be used"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_MultiThreadedSpinner":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-MultiThreadedSpinner_MultiThreadedSpinner","display_name":"MultiThreadedSpinner","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"thread_count","direction":null,"children":[{"type":"text","text":" Number of threads to use for calling callbacks.   0 will"},{"type":"text","text":" automatically use however many hardware threads exist on your system."}]}],"template_args":null,"params":[{"name":"thread_count","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-hasPending":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_m-hasPending","display_name":"hasPending","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not the timer has any pending events to call."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_read":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Serializer_read","display_name":"read","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTimer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SteadyTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isStarted":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isStarted","display_name":"isStarted","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not the node has been started through ros::start()"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner_U126Spinner":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner_U126Spinner","display_name":"~Spinner","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_V_Token":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_V_Token","display_name":"V_Token","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_ServicePublication":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_ServicePublication","display_name":"V_ServicePublication","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidParameterException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidParameterException","display_name":"InvalidParameterException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown when an invalid parameter is passed to a method"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-InvalidParameterException_InvalidParameterException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_SteadyTimerOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_SteadyTimerOptions","display_name":"SteadyTimerOptions","comment":null,"template_args":null,"params":[{"name":"_period","ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null}},{"name":"_callback","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTimerCallback &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SteadyTimerCallback","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"oneshot","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"autostart","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec","display_name":"ServiceSpec<MReq, MRes>","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_ResponseType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_ResponsePtr","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_CallbackType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_m-call","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_RequestType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_RequestPtr"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-HasHeader":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-HasHeader","display_name":"HasHeader<M>","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" HasHeader informs whether or not there is a header that gets serialized as the first thing in the message"}]}],"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-TimeStamp_m-pointer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-TimeStamp_m-pointer","display_name":"pointer","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const ros::Time *","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const ros::Time","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportTCPPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TransportTCPPtr","display_name":"TransportTCPPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<TransportTCP>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::TransportTCP>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_datatype":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-service_traits_datatype","display_name":"datatype","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" return DataType"},{"type":"text","text":"<M"},{"type":"text","text":">::value();"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleThreadedSpinner_m-spin":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleThreadedSpinner_m-spin","display_name":"spin","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Spin on a callback queue (defaults to the global one).  Blocks until roscpp has been shutdown."}]}],"template_args":null,"params":[{"name":"queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueue *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueue","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueue","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_latch":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_latch","display_name":"latch","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Whether or not this publication should \"latch\".  A latching publication will automatically send out the last published message"},{"type":"text","text":" to any new subscribers."}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleThreadedSpinner":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleThreadedSpinner","display_name":"SingleThreadedSpinner","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Spinner which runs in a single thread."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SingleThreadedSpinner_m-spin"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SubscriptionCallbackHelper_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"params","ty":{"kind":"lvaluereference","display_name":"ros::SubscriptionCallbackHelperCallParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::SubscriptionCallbackHelperCallParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriptionCallbackHelperCallParams","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_Level":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_Level","display_name":"Level","ty":{"kind":"elaborated","display_name":"levels::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"enum","display_name":"ros::console::levels::Level","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_isFixedSize":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_isFixedSize","display_name":"isFixedSize","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns IsFixedSize"},{"type":"text","text":"<M"},{"type":"text","text":">::value;"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSecUnsigned":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-normalizeSecNSecUnsigned","display_name":"normalizeSecNSecUnsigned","comment":null,"template_args":null,"params":[{"name":"sec","ty":{"kind":"lvaluereference","display_name":"int64_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"int64_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"nsec","ty":{"kind":"lvaluereference","display_name":"int64_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"int64_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConstMessage":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_m-getConstMessage","display_name":"getConstMessage","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Retrieve a const version of the message"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const boost::shared_ptr<ConstMessage> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const boost::shared_ptr<ConstMessage>","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::MessageEvent::ConstMessage>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_unadvertised_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_datatype_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_m-unadvertise","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_md5sum_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_callbacks_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_topic_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_c-Impl_node_handle_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_tracked_object_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_tracked_object_","display_name":"tracked_object_","ty":{"kind":"typedef","display_name":"ros::VoidConstWPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU62=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operatorU62=","display_name":"operator>=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_unresolved_remappings_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_unresolved_remappings_","display_name":"unresolved_remappings_","ty":{"kind":"typedef","display_name":"ros::M_string","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_definition":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_definition","display_name":"definition","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" returns Definition"},{"type":"text","text":"<M"},{"type":"text","text":">::value(m);"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toBoost":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-toBoost","display_name":"toBoost","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"elaborated","display_name":"boost::posix_time::time_duration","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"record","display_name":"boost::posix_time::time_duration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-boost_n-posix_time_c-time_duration","const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_queue_size":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_queue_size","display_name":"queue_size","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" The maximum number of outgoing messages to be queued for delivery to subscribers"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-sleep":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Rate_m-sleep","display_name":"sleep","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":"  Sleeps for any leftover time in a cycle. Calculated from the last time sleep, reset, or the constructor was called."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" True if the desired rate was met for the cycle, false otherwise."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::Timer::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_StreamType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_StreamType","display_name":"StreamType","ty":{"kind":"elaborated","display_name":"stream_types::StreamType","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"enum","display_name":"ros::serialization::stream_types::StreamType","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::WallTimer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_call","display_name":"call","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Mostly for internal use, the other templated versions of call() just call into this one"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceClient_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"req","ty":{"kind":"lvaluereference","display_name":"const ros::SerializedMessage &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"resp","ty":{"kind":"lvaluereference","display_name":"ros::SerializedMessage &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::SerializedMessage","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SerializedMessage","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"service_md5sum","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType","display_name":"TrueType","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base type for compile-type true/false tests.  Compatible with Boost.MPL.  classes inheriting from this type"},{"type":"text","text":" are "},{"type":"inlinecommand","command":"b","arguments":["true"],"style":"bold"},{"type":"text","text":" values."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType_value","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_s-TrueType_type"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_operatorU62U62":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream_operatorU62U62","display_name":"operator>>","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"ros::serialization::IStream &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::serialization::IStream","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-IStream","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_Stream":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_Stream","display_name":"Stream","comment":null,"template_args":null,"params":[{"name":"_data","ty":{"kind":"pointer","display_name":"uint8_t *","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"uint8_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"_count","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"protected","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TimeNotInitializedException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TimeNotInitializedException","display_name":"TimeNotInitializedException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Thrown if the ros subsystem hasn't been initialised before use."}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TimeNotInitializedException_TimeNotInitializedException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_string":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_S_string","display_name":"S_string","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isShuttingDown":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-isShuttingDown","display_name":"isShuttingDown","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not ros::shutdown() has been (or is being) called"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase","display_name":"FilterBase","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base-class for filters.  Filters allow full user-defined control over whether or not a message should print."},{"type":"text","text":" The ROS_X_FILTER... macros provide the filtering functionality."}]},{"type":"paragraph","children":[{"type":"text","text":" Filters get a chance to veto the message from printing at two times: first before the message arguments are"},{"type":"text","text":" evaluated and the message is formatted, and then once the message is formatted before it is printed.  It is also possible"},{"type":"text","text":" to change the message, logger and severity level at this stage (see the FilterParams struct for more details)."}]},{"type":"paragraph","children":[{"type":"text","text":" When a ROS_X_FILTER... macro is called, here is the high-level view of how it uses the filter passed in:"}]},{"type":"verbatimcommand","parts":["if (<logging level is enabled> && filter->isEnabled())","{","  <format message>","  <fill out FilterParams>","  if (filter->isEnabled(params))","  {","    <print message>","  }","}"]},{"type":"paragraph","children":[{"type":"text","text":" "}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase_U126FilterBase","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_c-FilterBase_m-isEnabled"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getCallerName":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceEvent_m-getCallerName","display_name":"getCallerName","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the name of the node which called this service"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::Publisher::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-DataType_m-value":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_traits_tc-DataType_m-value","display_name":"value","comment":null,"template_args":null,"params":[{"name":"m","ty":{"kind":"lvaluereference","display_name":"const M &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const M","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions","display_name":"SubscribeOptions","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_queue_size","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_datatype","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_tracked_object","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_initByFullCallbackType","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_md5sum","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_init","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_SubscribeOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_topic","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_callback_queue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_allow_concurrent_callbacks","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_transport_hints","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_create","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_helper"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"cb","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceSpec::CallbackType &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::ServiceSpec::CallbackType","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"params","ty":{"kind":"lvaluereference","display_name":"ServiceSpecCallParams<ros::ServiceSpec::RequestType, ros::ServiceSpec::ResponseType> &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"ServiceSpecCallParams<ros::ServiceSpec::RequestType, ros::ServiceSpec::ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isValid":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-isValid","display_name":"isValid","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns whether or not the current time is valid.  Time is valid if it is non-zero."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TimeNotInitializedException_TimeNotInitializedException":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-TimeNotInitializedException_TimeNotInitializedException","display_name":"TimeNotInitializedException","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_connection_header_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_connection_header_","display_name":"connection_header_","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::M_string>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscription":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscription","display_name":"Subscription","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_AdvertiseServiceOptions":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions_AdvertiseServiceOptions","display_name":"AdvertiseServiceOptions","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_create_req_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_create_req_","display_name":"create_req_","ty":{"kind":"typedef","display_name":"ros::ServiceCallbackHelperT::ReqCreateFunction","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_ConstMessagePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-MessageEvent_ConstMessagePtr","display_name":"ConstMessagePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ConstMessage>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::MessageEvent::ConstMessage>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator!=":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-DurationBase_m-operator!=","display_name":"operator!=","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const T &","name":null,"const_qualified":false,"pointee":{"kind":"unexposed","display_name":"const T","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TimerCallback":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TimerCallback","display_name":"TimerCallback","ty":{"kind":"elaborated","display_name":"boost::function<void (const TimerEvent &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<void (const ros::TimerEvent &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration_m-sleep":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration_m-sleep","display_name":"sleep","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" sleep for the amount of time specified by this Duration.  If a signal interrupts the sleep, resleeps for the time remaining."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" True if the desired sleep duration was met, false otherwise."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_autostart":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerOptions_autostart","display_name":"autostart","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_createTimer","display_name":"createTimer","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Create a timer which will call a callback at the specified rate.  This variant takes"},{"type":"text","text":" a class member function, and a shared pointer to the object to call the method on."}]},{"type":"paragraph","children":[{"type":"text","text":" When the Timer (and all copies of it) returned goes out of scope, the timer will automatically"},{"type":"text","text":" be stopped, and the callback will no longer be called."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"period","direction":null,"children":[{"type":"text","text":" The period at which to call the callback"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"callback","direction":null,"children":[{"type":"text","text":" The method to call"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"obj","direction":null,"children":[{"type":"text","text":" The object to call the method on.  Since this is a shared pointer, the object will"},{"type":"text","text":" automatically be tracked with a weak_ptr so that if it is deleted before the Timer goes out of"},{"type":"text","text":" scope the callback will no longer be called (and therefore will not crash)."},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"oneshot","direction":null,"children":[{"type":"text","text":" If true, this timer will only fire once"},{"type":"text","text":" "}]},{"type":"paramcommand","index":4,"parameter":"autostart","direction":null,"children":[{"type":"text","text":" If true (default), return timer that is already started"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"record","display_name":"ros::Timer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-destruct":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-destruct","display_name":"destruct","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_current_real":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerEvent_current_real","display_name":"current_real","ty":{"kind":"record","display_name":"ros::SteadyTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-setCreateFunction":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-SubscriptionCallbackHelperT_m-setCreateFunction","display_name":"setCreateFunction","comment":null,"template_args":null,"params":[{"name":"create","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriptionCallbackHelperT::CreateFunction &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriptionCallbackHelperT::CreateFunction","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TIME_MAX":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_TIME_MAX","display_name":"TIME_MAX","ty":{"kind":"record","display_name":"const ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":true,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":null},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_PublisherLink":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_PublisherLink","display_name":"V_PublisherLink","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toSec":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-toSec","display_name":"toSec","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_Callback":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceCallbackHelperT_Callback","display_name":"Callback","ty":{"kind":"unexposed","display_name":"typename Spec::CallbackType","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_ServicePublication":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_L_ServicePublication","display_name":"L_ServicePublication","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_queue_size":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_queue_size","display_name":"queue_size","ty":{"kind":"typedef","display_name":"uint32_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Number of incoming messages to queue up for processing (messages in excess of this queue capacity will be discarded)."}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_connect_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_connect_","display_name":"connect_","ty":{"kind":"typedef","display_name":"ros::SubscriberStatusCallback","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-advertiseService":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-advertiseService","display_name":"advertiseService","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Advertise a service, with full range of AdvertiseServiceOptions"}]},{"type":"paragraph","children":[{"type":"text","text":" This call connects to the master to publicize that the node will be"},{"type":"text","text":" offering an RPC service with the given name."}]},{"type":"paragraph","children":[{"type":"text","text":" This version of advertiseService allows the full set of options, exposed through the AdvertiseServiceOptions class"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"ops","direction":null,"children":[{"type":"text","text":" Advertise options"},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" On success, a ServiceServer that, when all copies of it go out of scope, will unadvertise this service."},{"type":"text","text":" On failure, an empty ServiceServer which can be checked with:"}]},{"type":"verbatimcommand","parts":["AdvertiseServiceOptions ops;","...","ros::NodeHandle nodeHandle;","ros::ServiceServer service = nodeHandle.advertiseService(ops);","if (service)  // Enter if advertised service is valid","{","...","}"]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"throws","arguments":[],"children":[{"type":"text","text":" InvalidNameException If the service name begins with a tilde, or is an otherwise invalid graph resource name"}]}],"template_args":null,"params":[{"name":"ops","ty":{"kind":"lvaluereference","display_name":"ros::AdvertiseServiceOptions &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::AdvertiseServiceOptions","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseServiceOptions","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"record","display_name":"ros::ServiceServer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Timer_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::Timer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publication":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publication","display_name":"Publication","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_U126SteadyTimer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_U126SteadyTimer","display_name":"~SteadyTimer","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":true},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-is_zero":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-TimeBase_m-is_zero","display_name":"is_zero","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_SteadyTime":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTime_SteadyTime","display_name":"SteadyTime","comment":null,"template_args":null,"params":[{"name":"t","ty":{"kind":"double","display_name":"double","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::SteadyTimer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::SteadyTimer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-stop":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-stop","display_name":"stop","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Stop this spinner from running"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_current_real":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_current_real","display_name":"current_real","ty":{"kind":"record","display_name":"ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_c-StreamOverrunException":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_c-StreamOverrunException","display_name":"StreamOverrunException","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Base class for all exceptions thrown by ROS"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_c-StreamOverrunException_StreamOverrunException"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServicePublicationPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_ServicePublicationPtr","display_name":"ServicePublicationPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ServicePublication>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServicePublication>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-setCallbackQueue":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-setCallbackQueue","display_name":"setCallbackQueue","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Set the default callback queue to be used by this NodeHandle."}]},{"type":"paragraph","children":[{"type":"text","text":" Setting this will cause any callbacks from"},{"type":"text","text":" advertisements/subscriptions/services/etc. to happen through the"},{"type":"text","text":" use of the specified queue.  NULL (the default) causes the global"},{"type":"text","text":" queue (serviced by ros::spin() and ros::spinOnce()) to be used."}]}],"template_args":null,"params":[{"name":"queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidConstWPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_VoidConstWPtr","display_name":"VoidConstWPtr","ty":{"kind":"elaborated","display_name":"boost::weak_ptr<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"weak_ptr<const void>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::ServiceServer &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::ServiceServer","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceServer","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_period":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerOptions_period","display_name":"period","ty":{"kind":"record","display_name":"ros::WallDuration","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallDuration","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time_m-init","display_name":"init","comment":null,"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions","display_name":"SteadyTimerOptions","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_oneshot","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_SteadyTimerOptions","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_autostart","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_callback","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_period","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_callback_queue","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SteadyTimerOptions_tracked_object"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-start":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-AsyncSpinner_m-start","display_name":"start","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Start this spinner spinning asynchronously"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-resolveName":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-resolveName","display_name":"resolveName","comment":null,"template_args":null,"params":[{"name":"name","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"remap","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},{"name":"","ty":{"kind":"record","display_name":"ros::NodeHandle::no_validate","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_s-no_validate","const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"visibility":"default","accessibility":"private","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations":{"type":"namespace","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations","display_name":"message_operations","comment":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_s-Printer","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-message_operations_tc-Printer"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operatorU60":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher_m-operatorU60","display_name":"operator<","comment":null,"template_args":null,"params":[{"name":"rhs","ty":{"kind":"lvaluereference","display_name":"const ros::Publisher &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::Publisher","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Publisher","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_last_real":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-WallTimerEvent_last_real","display_name":"last_real","ty":{"kind":"record","display_name":"ros::WallTime","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTime","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_string":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_string","display_name":"V_string","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_last_real":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-TimerEvent_last_real","display_name":"last_real","ty":{"kind":"record","display_name":"ros::Time","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Time","const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams_connection_header":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_tc-PreDeserializeParams_connection_header","display_name":"connection_header","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getUnresolvedNamespace":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle_m-getUnresolvedNamespace","display_name":"getUnresolvedNamespace","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Returns the namespace associated with this NodeHandle as"},{"type":"text","text":" it was passed in (before it was resolved)"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandleBackingCollection":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandleBackingCollection","display_name":"NodeHandleBackingCollection","comment":null,"template_args":null,"children":[]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_Subscriber":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_Subscriber","display_name":"Subscriber","comment":null,"template_args":null,"params":[{"name":"topic","ty":{"kind":"lvaluereference","display_name":"const std::string &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"const std::string","name":null,"const_qualified":true,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"node_handle","ty":{"kind":"lvaluereference","display_name":"const ros::NodeHandle &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"const ros::NodeHandle","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-NodeHandle","const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"helper","ty":{"kind":"lvaluereference","display_name":"const ros::SubscriptionCallbackHelperPtr &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"const ros::SubscriptionCallbackHelperPtr","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"private","is_ctor":true,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ok":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-ok","display_name":"ok","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Check whether it's time to exit."}]},{"type":"paragraph","children":[{"type":"text","text":" ok() becomes false once ros::shutdown() has been called and is finished"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" true if we're still OK, false if it's time to exit"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-spin":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_f-spin","display_name":"spin","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Enter simple event loop"}]},{"type":"paragraph","children":[{"type":"text","text":" This method enters a loop, processing callbacks.  This method should only be used"},{"type":"text","text":" if the NodeHandle API is being used."}]},{"type":"paragraph","children":[{"type":"text","text":" This method is mostly useful when your node does all of its work in"},{"type":"text","text":" subscription callbacks.  It will not process any callbacks that have been assigned to"},{"type":"text","text":" custom queues."}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"spinner","direction":null,"children":[{"type":"text","text":" a spinner to use to call callbacks.  Two default implementations are available,"},{"type":"text","text":" SingleThreadedSpinner and MultiThreadedSpinner"}]}],"template_args":null,"params":[{"name":"spinner","ty":{"kind":"lvaluereference","display_name":"ros::Spinner &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::Spinner","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Spinner","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_NodeHandlePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_NodeHandlePtr","display_name":"NodeHandlePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<NodeHandle>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::NodeHandle>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Publication":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Publication","display_name":"V_Publication","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl":{"type":"class","is_struct":false,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl","display_name":"Impl","comment":null,"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_helper_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_U126Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_node_handle_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_Impl","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_m-unsubscribe","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_unsubscribed_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_m-isValid","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-Subscriber_c-Impl_topic_"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper_m-call":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-ServiceCallbackHelper_m-call","display_name":"call","comment":null,"template_args":null,"params":[{"name":"params","ty":{"kind":"lvaluereference","display_name":"ros::ServiceCallbackHelperCallParams &","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::ServiceCallbackHelperCallParams","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceCallbackHelperCallParams","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}}],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_callback_queue":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscribeOptions_callback_queue","display_name":"callback_queue","ty":{"kind":"pointer","display_name":"ros::CallbackQueueInterface *","name":null,"const_qualified":false,"pointee":{"kind":"record","display_name":"ros::CallbackQueueInterface","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-CallbackQueueInterface","const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Queue to add callbacks to.  If NULL, the global callback queue will be used"}]}],"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_ResponsePtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_ResponsePtr","display_name":"ResponsePtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::ServiceSpec::ResponseType>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_ServiceServer":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_ServiceServer","display_name":"V_ServiceServer","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-vformatToBuffer":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-console_f-vformatToBuffer","display_name":"vformatToBuffer","comment":null,"template_args":null,"params":[{"name":"buffer","ty":{"kind":"lvaluereference","display_name":"boost::shared_array<char> &","name":null,"const_qualified":false,"pointee":{"kind":"elaborated","display_name":"boost::shared_array<char>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_array<char>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"elaborated":null}},{"name":"buffer_size","ty":{"kind":"lvaluereference","display_name":"size_t &","name":null,"const_qualified":false,"pointee":{"kind":"typedef","display_name":"size_t","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"fmt","ty":{"kind":"pointer","display_name":"const char *","name":null,"const_qualified":false,"pointee":{"kind":"chars","display_name":"const char","name":null,"const_qualified":true,"pointee":null,"elaborated":null},"elaborated":null}},{"name":"args","ty":{"kind":"typedef","display_name":"va_list","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":null,"is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_init":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-AdvertiseOptions_init","display_name":"init","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" templated helper function for automatically filling out md5sum, datatype and message definition"}]},{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"paramcommand","index":null,"parameter":"M","direction":null,"children":[{"type":"text","text":" [template] Message type"},{"type":"text","text":" "}]},{"type":"paramcommand","index":0,"parameter":"_topic","direction":null,"children":[{"type":"text","text":" Topic to publish on"},{"type":"text","text":" "}]},{"type":"paramcommand","index":1,"parameter":"_queue_size","direction":null,"children":[{"type":"text","text":" Maximum number of outgoing messages to be queued for delivery to subscribers"},{"type":"text","text":" "}]},{"type":"paramcommand","index":2,"parameter":"_connect_cb","direction":null,"children":[{"type":"text","text":" Function to call when a subscriber connects to this topic"},{"type":"text","text":" "}]},{"type":"paramcommand","index":3,"parameter":"_disconnect_cb","direction":null,"children":[{"type":"text","text":" Function to call when a subscriber disconnects from this topic"}]}],"template_args":null,"params":[],"ret_ty":{"kind":"void","display_name":"void","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Subscriber":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_V_Subscriber","display_name":"V_Subscriber","ty":{"kind":"int","display_name":"int","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_impl_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallTimer_impl_","display_name":"impl_","ty":{"kind":"typedef","display_name":"ros::WallTimer::ImplPtr","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"private"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-sleep":{"type":"function","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-WallRate_m-sleep","display_name":"sleep","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":"  Sleeps for any leftover time in a cycle. Calculated from the last time sleep, reset, or the constructor was called."},{"type":"text","text":" "}]},{"type":"blockcommand","command":"return","arguments":[],"children":[{"type":"text","text":" Passes through the return value from WallDuration::sleep() if it slept, false otherwise."}]}],"template_args":null,"params":[],"ret_ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"visibility":"default","accessibility":"public","is_ctor":false,"is_dtor":false},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream":{"type":"class","is_struct":true,"name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream","display_name":"Stream","comment":[{"type":"paragraph","children":[{"type":"text","text":" "}]},{"type":"blockcommand","command":"brief","arguments":[],"children":[{"type":"text","text":" Stream base-class, provides common functionality for IStream and OStream"}]}],"template_args":null,"children":["homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_Stream","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_data_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-advance","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_end_","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-getData","homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_n-serialization_s-Stream_m-getLength"]},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_has_tracked_object_":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-SubscriberCallbacks_has_tracked_object_","display_name":"has_tracked_object_","ty":{"kind":"bool","display_name":"bool","name":null,"const_qualified":false,"pointee":null,"elaborated":null},"comment":null,"visibility":"default","accessibility":"public"},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_CallbackType":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_tc-ServiceSpec_CallbackType","display_name":"CallbackType","ty":{"kind":"elaborated","display_name":"boost::function<bool (RequestType &, ResponseType &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"function<bool (ros::ServiceSpec::RequestType &, ros::ServiceSpec::ResponseType &)>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_ImplPtr":{"type":"typedef","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_c-SteadyTimer_ImplPtr","display_name":"ImplPtr","ty":{"kind":"elaborated","display_name":"boost::shared_ptr<Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"unexposed","display_name":"shared_ptr<ros::SteadyTimer::Impl>","name":null,"const_qualified":false,"pointee":null,"elaborated":null}}},"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_md5sum":{"type":"variable","name":"homepackagesquori_holonomic_drive_controllerquori_holonomic_drive_controller_apin-ros_s-ServiceClientOptions_md5sum","display_name":"md5sum","ty":{"kind":"elaborated","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":{"kind":"typedef","display_name":"std::string","name":null,"const_qualified":false,"pointee":null,"elaborated":null}},"comment":[{"type":"paragraph","children":[{"type":"text","text":" Service md5sum"}]}],"visibility":"default","accessibility":"public"}}}